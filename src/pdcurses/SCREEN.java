package pdcurses;
import org.bridj.Pointer;
import org.bridj.StructObject;
import org.bridj.ann.CLong;
import org.bridj.ann.Field;
import org.bridj.ann.Library;
import pdcurses.PdcursesLibrary.FILE;
/**
 * <i>native declaration : include\curses.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("pdcurses") 
public class SCREEN extends StructObject {
	public SCREEN() {
		super();
	}
	/**
	 * if initscr() called, and not endwin()<br>
	 * C type : _bool
	 */
	@Field(0) 
	public byte alive() {
		return this.io.getByteField(this, 0);
	}
	/**
	 * if initscr() called, and not endwin()<br>
	 * C type : _bool
	 */
	@Field(0) 
	public SCREEN alive(byte alive) {
		this.io.setByteField(this, 0, alive);
		return this;
	}
	/**
	 * if cr -> lf<br>
	 * C type : _bool
	 */
	@Field(1) 
	public byte autocr() {
		return this.io.getByteField(this, 1);
	}
	/**
	 * if cr -> lf<br>
	 * C type : _bool
	 */
	@Field(1) 
	public SCREEN autocr(byte autocr) {
		this.io.setByteField(this, 1, autocr);
		return this;
	}
	/**
	 * if terminal unbuffered<br>
	 * C type : _bool
	 */
	@Field(2) 
	public byte cbreak() {
		return this.io.getByteField(this, 2);
	}
	/**
	 * if terminal unbuffered<br>
	 * C type : _bool
	 */
	@Field(2) 
	public SCREEN cbreak(byte cbreak) {
		this.io.setByteField(this, 2, cbreak);
		return this;
	}
	/**
	 * if terminal echo<br>
	 * C type : _bool
	 */
	@Field(3) 
	public byte echo() {
		return this.io.getByteField(this, 3);
	}
	/**
	 * if terminal echo<br>
	 * C type : _bool
	 */
	@Field(3) 
	public SCREEN echo(byte echo) {
		this.io.setByteField(this, 3, echo);
		return this;
	}
	/**
	 * raw input mode (v. cooked input)<br>
	 * C type : _bool
	 */
	@Field(4) 
	public byte raw_inp() {
		return this.io.getByteField(this, 4);
	}
	/**
	 * raw input mode (v. cooked input)<br>
	 * C type : _bool
	 */
	@Field(4) 
	public SCREEN raw_inp(byte raw_inp) {
		this.io.setByteField(this, 4, raw_inp);
		return this;
	}
	/**
	 * raw output mode (7 v. 8 bits)<br>
	 * C type : _bool
	 */
	@Field(5) 
	public byte raw_out() {
		return this.io.getByteField(this, 5);
	}
	/**
	 * raw output mode (7 v. 8 bits)<br>
	 * C type : _bool
	 */
	@Field(5) 
	public SCREEN raw_out(byte raw_out) {
		this.io.setByteField(this, 5, raw_out);
		return this;
	}
	/**
	 * FALSE if the bell is visual<br>
	 * C type : _bool
	 */
	@Field(6) 
	public byte audible() {
		return this.io.getByteField(this, 6);
	}
	/**
	 * FALSE if the bell is visual<br>
	 * C type : _bool
	 */
	@Field(6) 
	public SCREEN audible(byte audible) {
		this.io.setByteField(this, 6, audible);
		return this;
	}
	/**
	 * TRUE if current screen is mono<br>
	 * C type : _bool
	 */
	@Field(7) 
	public byte mono() {
		return this.io.getByteField(this, 7);
	}
	/**
	 * TRUE if current screen is mono<br>
	 * C type : _bool
	 */
	@Field(7) 
	public SCREEN mono(byte mono) {
		this.io.setByteField(this, 7, mono);
		return this;
	}
	/**
	 * TRUE if TERM has been resized<br>
	 * C type : _bool
	 */
	@Field(8) 
	public byte resized() {
		return this.io.getByteField(this, 8);
	}
	/**
	 * TRUE if TERM has been resized<br>
	 * C type : _bool
	 */
	@Field(8) 
	public SCREEN resized(byte resized) {
		this.io.setByteField(this, 8, resized);
		return this;
	}
	/**
	 * TRUE if we have the original colors<br>
	 * C type : _bool
	 */
	@Field(9) 
	public byte orig_attr() {
		return this.io.getByteField(this, 9);
	}
	/**
	 * TRUE if we have the original colors<br>
	 * C type : _bool
	 */
	@Field(9) 
	public SCREEN orig_attr(byte orig_attr) {
		this.io.setByteField(this, 9, orig_attr);
		return this;
	}
	/// original screen foreground color
	@Field(10) 
	public short orig_fore() {
		return this.io.getShortField(this, 10);
	}
	/// original screen foreground color
	@Field(10) 
	public SCREEN orig_fore(short orig_fore) {
		this.io.setShortField(this, 10, orig_fore);
		return this;
	}
	/// original screen foreground color
	@Field(11) 
	public short orig_back() {
		return this.io.getShortField(this, 11);
	}
	/// original screen foreground color
	@Field(11) 
	public SCREEN orig_back(short orig_back) {
		this.io.setShortField(this, 11, orig_back);
		return this;
	}
	/// position of physical cursor
	@Field(12) 
	public int cursrow() {
		return this.io.getIntField(this, 12);
	}
	/// position of physical cursor
	@Field(12) 
	public SCREEN cursrow(int cursrow) {
		this.io.setIntField(this, 12, cursrow);
		return this;
	}
	/// position of physical cursor
	@Field(13) 
	public int curscol() {
		return this.io.getIntField(this, 13);
	}
	/// position of physical cursor
	@Field(13) 
	public SCREEN curscol(int curscol) {
		this.io.setIntField(this, 13, curscol);
		return this;
	}
	/// visibility of cursor
	@Field(14) 
	public int visibility() {
		return this.io.getIntField(this, 14);
	}
	/// visibility of cursor
	@Field(14) 
	public SCREEN visibility(int visibility) {
		this.io.setIntField(this, 14, visibility);
		return this;
	}
	/// original cursor size
	@Field(15) 
	public int orig_cursor() {
		return this.io.getIntField(this, 15);
	}
	/// original cursor size
	@Field(15) 
	public SCREEN orig_cursor(int orig_cursor) {
		this.io.setIntField(this, 15, orig_cursor);
		return this;
	}
	/// new value for LINES
	@Field(16) 
	public int lines() {
		return this.io.getIntField(this, 16);
	}
	/// new value for LINES
	@Field(16) 
	public SCREEN lines(int lines) {
		this.io.setIntField(this, 16, lines);
		return this;
	}
	/// new value for COLS
	@Field(17) 
	public int cols() {
		return this.io.getIntField(this, 17);
	}
	/// new value for COLS
	@Field(17) 
	public SCREEN cols(int cols) {
		this.io.setIntField(this, 17, cols);
		return this;
	}
	/**
	 * trap these mouse button events<br>
	 * C type : mmask_t
	 */
	@CLong 
	@Field(18) 
	public long _trap_mbe() {
		return this.io.getCLongField(this, 18);
	}
	/**
	 * trap these mouse button events<br>
	 * C type : mmask_t
	 */
	@CLong 
	@Field(18) 
	public SCREEN _trap_mbe(long _trap_mbe) {
		this.io.setCLongField(this, 18, _trap_mbe);
		return this;
	}
	/**
	 * time to wait (in ms) for a<br>
	 * button release after a press, in<br>
	 * order to count it as a click
	 */
	@Field(19) 
	public int mouse_wait() {
		return this.io.getIntField(this, 19);
	}
	/**
	 * time to wait (in ms) for a<br>
	 * button release after a press, in<br>
	 * order to count it as a click
	 */
	@Field(19) 
	public SCREEN mouse_wait(int mouse_wait) {
		this.io.setIntField(this, 19, mouse_wait);
		return this;
	}
	/// lines in use by slk_init()
	@Field(20) 
	public int slklines() {
		return this.io.getIntField(this, 20);
	}
	/// lines in use by slk_init()
	@Field(20) 
	public SCREEN slklines(int slklines) {
		this.io.setIntField(this, 20, slklines);
		return this;
	}
	/**
	 * window for slk<br>
	 * C type : WINDOW*
	 */
	@Field(21) 
	public Pointer<WINDOW > slk_winptr() {
		return this.io.getPointerField(this, 21);
	}
	/**
	 * window for slk<br>
	 * C type : WINDOW*
	 */
	@Field(21) 
	public SCREEN slk_winptr(Pointer<WINDOW > slk_winptr) {
		this.io.setPointerField(this, 21, slk_winptr);
		return this;
	}
	/// lines ripped off via ripoffline()
	@Field(22) 
	public int linesrippedoff() {
		return this.io.getIntField(this, 22);
	}
	/// lines ripped off via ripoffline()
	@Field(22) 
	public SCREEN linesrippedoff(int linesrippedoff) {
		this.io.setIntField(this, 22, linesrippedoff);
		return this;
	}
	/**
	 * lines ripped off on<br>
	 * top via ripoffline()
	 */
	@Field(23) 
	public int linesrippedoffontop() {
		return this.io.getIntField(this, 23);
	}
	/**
	 * lines ripped off on<br>
	 * top via ripoffline()
	 */
	@Field(23) 
	public SCREEN linesrippedoffontop(int linesrippedoffontop) {
		this.io.setIntField(this, 23, linesrippedoffontop);
		return this;
	}
	/**
	 * 1/10ths second to wait block<br>
	 * getch() for
	 */
	@Field(24) 
	public int delaytenths() {
		return this.io.getIntField(this, 24);
	}
	/**
	 * 1/10ths second to wait block<br>
	 * getch() for
	 */
	@Field(24) 
	public SCREEN delaytenths(int delaytenths) {
		this.io.setIntField(this, 24, delaytenths);
		return this;
	}
	/**
	 * TRUE if screen background<br>
	 * to be preserved<br>
	 * C type : _bool
	 */
	@Field(25) 
	public byte _preserve() {
		return this.io.getByteField(this, 25);
	}
	/**
	 * TRUE if screen background<br>
	 * to be preserved<br>
	 * C type : _bool
	 */
	@Field(25) 
	public SCREEN _preserve(byte _preserve) {
		this.io.setByteField(this, 25, _preserve);
		return this;
	}
	/**
	 * specifies if screen background<br>
	 * to be restored, and how
	 */
	@Field(26) 
	public int _restore() {
		return this.io.getIntField(this, 26);
	}
	/**
	 * specifies if screen background<br>
	 * to be restored, and how
	 */
	@Field(26) 
	public SCREEN _restore(int _restore) {
		this.io.setIntField(this, 26, _restore);
		return this;
	}
	/**
	 * key modifiers (SHIFT, CONTROL, etc.)<br>
	 * on last key press
	 */
	@CLong 
	@Field(27) 
	public long key_modifiers() {
		return this.io.getCLongField(this, 27);
	}
	/**
	 * key modifiers (SHIFT, CONTROL, etc.)<br>
	 * on last key press
	 */
	@CLong 
	@Field(27) 
	public SCREEN key_modifiers(long key_modifiers) {
		this.io.setCLongField(this, 27, key_modifiers);
		return this;
	}
	/**
	 * TRUE if modifier keys are<br>
	 * returned as "real" keys<br>
	 * C type : _bool
	 */
	@Field(28) 
	public byte return_key_modifiers() {
		return this.io.getByteField(this, 28);
	}
	/**
	 * TRUE if modifier keys are<br>
	 * returned as "real" keys<br>
	 * C type : _bool
	 */
	@Field(28) 
	public SCREEN return_key_modifiers(byte return_key_modifiers) {
		this.io.setByteField(this, 28, return_key_modifiers);
		return this;
	}
	/**
	 * TRUE if last key is a special key;<br>
	 * used internally by get_wch()<br>
	 * C type : _bool
	 */
	@Field(29) 
	public byte key_code() {
		return this.io.getByteField(this, 29);
	}
	/**
	 * TRUE if last key is a special key;<br>
	 * used internally by get_wch()<br>
	 * C type : _bool
	 */
	@Field(29) 
	public SCREEN key_code(byte key_code) {
		this.io.setByteField(this, 29, key_code);
		return this;
	}
	/**
	 * last returned mouse status<br>
	 * C type : MOUSE_STATUS
	 */
	@Field(30) 
	public MOUSE_STATUS mouse_status() {
		return this.io.getNativeObjectField(this, 30);
	}
	/**
	 * last returned mouse status<br>
	 * C type : MOUSE_STATUS
	 */
	@Field(30) 
	public SCREEN mouse_status(MOUSE_STATUS mouse_status) {
		this.io.setNativeObjectField(this, 30, mouse_status);
		return this;
	}
	/// color of line attributes - default -1
	@Field(31) 
	public short line_color() {
		return this.io.getShortField(this, 31);
	}
	/// color of line attributes - default -1
	@Field(31) 
	public SCREEN line_color(short line_color) {
		this.io.setShortField(this, 31, line_color);
		return this;
	}
	/**
	 * attribute capabilities<br>
	 * C type : attr_t
	 */
	@CLong 
	@Field(32) 
	public long termattrs() {
		return this.io.getCLongField(this, 32);
	}
	/**
	 * attribute capabilities<br>
	 * C type : attr_t
	 */
	@CLong 
	@Field(32) 
	public SCREEN termattrs(long termattrs) {
		this.io.setCLongField(this, 32, termattrs);
		return this;
	}
	/**
	 * the last screen image<br>
	 * C type : WINDOW*
	 */
	@Field(33) 
	public Pointer<WINDOW > lastscr() {
		return this.io.getPointerField(this, 33);
	}
	/**
	 * the last screen image<br>
	 * C type : WINDOW*
	 */
	@Field(33) 
	public SCREEN lastscr(Pointer<WINDOW > lastscr) {
		this.io.setPointerField(this, 33, lastscr);
		return this;
	}
	/**
	 * debug trace file pointer<br>
	 * C type : FILE*
	 */
	@Field(34) 
	public Pointer<FILE > dbfp() {
		return this.io.getPointerField(this, 34);
	}
	/**
	 * debug trace file pointer<br>
	 * C type : FILE*
	 */
	@Field(34) 
	public SCREEN dbfp(Pointer<FILE > dbfp) {
		this.io.setPointerField(this, 34, dbfp);
		return this;
	}
	/**
	 * TRUE after start_color()<br>
	 * C type : _bool
	 */
	@Field(35) 
	public byte color_started() {
		return this.io.getByteField(this, 35);
	}
	/**
	 * TRUE after start_color()<br>
	 * C type : _bool
	 */
	@Field(35) 
	public SCREEN color_started(byte color_started) {
		this.io.setByteField(this, 35, color_started);
		return this;
	}
	/**
	 * redraw on napms() after init_color()<br>
	 * C type : _bool
	 */
	@Field(36) 
	public byte dirty() {
		return this.io.getByteField(this, 36);
	}
	/**
	 * redraw on napms() after init_color()<br>
	 * C type : _bool
	 */
	@Field(36) 
	public SCREEN dirty(byte dirty) {
		this.io.setByteField(this, 36, dirty);
		return this;
	}
	/// start of selection (y * COLS + x)
	@Field(37) 
	public int sel_start() {
		return this.io.getIntField(this, 37);
	}
	/// start of selection (y * COLS + x)
	@Field(37) 
	public SCREEN sel_start(int sel_start) {
		this.io.setIntField(this, 37, sel_start);
		return this;
	}
	/// end of selection
	@Field(38) 
	public int sel_end() {
		return this.io.getIntField(this, 38);
	}
	/// end of selection
	@Field(38) 
	public SCREEN sel_end(int sel_end) {
		this.io.setIntField(this, 38, sel_end);
		return this;
	}
	public SCREEN(Pointer pointer) {
		super(pointer);
	}
}
