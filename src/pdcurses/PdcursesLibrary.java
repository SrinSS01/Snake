package pdcurses;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Name;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
import org.bridj.util.DefaultParameterizedType;
/**
 * Wrapper for library <b>pdcurses</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("pdcurses") 
@Runtime(CRuntime.class) 
public class PdcursesLibrary {
	static {
		BridJ.register();
	}
	/// set if built with -DPDCDEBUG
	public static final int PDC_VFLAG_DEBUG = (int)1;
	/// -DPDC_WIDE
	public static final int PDC_VFLAG_WIDE = (int)2;
	/// -DPDC_FORCE_UTF8
	public static final int PDC_VFLAG_UTF8 = (int)4;
	/// -DPDC_DLL_BUILD
	public static final int PDC_VFLAG_DLL = (int)8;
	/// -DPDC_RGB
	public static final int PDC_VFLAG_RGB = (int)16;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_DOWN = (int)536;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SFIND = (int)387;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PGUP = (int)445;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON4_TRIPLE_CLICKED = (int)524288;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_BEG = (int)352;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_TRIPLE_CLICKED = (int)4;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON1_CLICKED = (int)4;
	/// <i>native declaration : include\curses.h</i>
	public static final int PADSTOP = (int)462;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_MODIFIER_SHIFT = (int)67108864;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_RESIZE = (int)546;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_LEFT = (int)260;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_UP = (int)480;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SREDO = (int)398;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_VER_MAJOR = (int)3;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_DEL = (int)527;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_BLUE = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SDC = (int)381;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_MINUS = (int)484;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_EIC = (int)332;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SDL = (int)382;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_RIGHT = (int)444;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_COLOR_SHIFT = (int)24;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_BKSP = (int)504;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CTAB = (int)341;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_LL = (int)347;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_CLIP_ACCESS_ERROR = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON3_PRESSED = (int)2048;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_INS = (int)477;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_ALT_R = (int)545;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_ABORT = (int)348;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PGDN = (int)488;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_ALT_L = (int)544;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_SEMICOLON = (int)499;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_Z = (int)442;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_Y = (int)441;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_X = (int)440;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_W = (int)439;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PADSTAR = (int)471;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_V = (int)438;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_HOME = (int)262;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_ALT = (int)32;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_M = (int)429;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_PREVIOUS = (int)368;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_L = (int)428;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON1_MOVED = (int)16;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_RESUME = (int)374;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SRSUME = (int)401;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_K = (int)427;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_UNDO = (int)406;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_J = (int)426;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_I = (int)425;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_H = (int)424;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_EOL = (int)335;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_G = (int)423;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_F = (int)422;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_U = (int)437;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_SHIFT = (int)8;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_T = (int)436;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_CONTROL = (int)16;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_S = (int)435;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_R = (int)434;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_YELLOW = (int)(4 | 2);
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_Q = (int)433;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_EOS = (int)334;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_P = (int)432;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_O = (int)431;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_N = (int)430;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_DOWN = (int)491;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_RESTART = (int)373;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_UP = (int)535;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_9 = (int)416;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_8 = (int)415;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_7 = (int)414;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_KEY_MODIFIER_CONTROL = (int)2;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_6 = (int)413;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_E = (int)421;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_D = (int)420;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_C = (int)419;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SPREVIOUS = (int)396;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_B = (int)418;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON2_TRIPLE_CLICKED = (int)512;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_A = (int)417;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CANCEL = (int)353;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_MOUSE = (int)539;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SPRINT = (int)397;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_DEL = (int)478;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_TAB = (int)482;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SSAVE = (int)402;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON5_TRIPLE_CLICKED = (int)16777216;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_IL = (int)329;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_DOWN = (int)258;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALL_MOUSE_EVENTS = (int)536870911;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SIC = (int)389;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_INS = (int)479;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_IC = (int)331;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_HOME = (int)486;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_MOUSE_WHEEL_DOWN = (int)64;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON3_RELEASED = (int)1024;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_END = (int)358;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_MAX = (int)548;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON1_TRIPLE_CLICKED = (int)16;
	/// <i>native declaration : include\curses.h</i>
	public static final String PDC_VERDOT = (String)"3.9";
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_RELEASED = (int)0;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_EQUAL = (int)485;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_CYAN = (int)(1 | 2);
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PADSTAR = (int)475;
	/// <i>native declaration : include\curses.h</i>
	public static final int WHEEL_SCROLLED = (int)6;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SAVE = (int)375;
	/// <i>native declaration : include\curses.h</i>
	public static final int MOUSE_WHEEL_SCROLL = (int)33554432;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_RIGHT = (int)492;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_LEFT = (int)443;
	/// <i>native declaration : include\curses.h</i>
	public static final int ERR = (int)(-1);
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_ENTER = (int)529;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_5 = (int)412;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_4 = (int)411;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_3 = (int)410;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_RED = (int)4;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_2 = (int)409;
	/// <i>native declaration : include\curses.h</i>
	public static final int REPORT_MOUSE_POSITION = (int)536870912;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_1 = (int)408;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_0 = (int)407;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON4_RELEASED = (int)32768;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_PADSLASH = (int)531;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_ENTER = (int)494;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SCANCEL = (int)377;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_BQUOTE = (int)496;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_F0 = (int)264;
	/// <i>native declaration : include\curses.h</i>
	public static final int PADSLASH = (int)458;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SNEXT = (int)394;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_EXIT = (int)359;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PADENTER = (int)460;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SMESSAGE = (int)392;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SHIFT_L = (int)540;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_ACTION_MASK = (int)7;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_ENTER = (int)343;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_ESC = (int)495;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_RIGHT = (int)261;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_DL = (int)328;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SHIFT_R = (int)541;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON2_CLICKED = (int)128;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_BUILD = (int)3900;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_MOUSE_MOVED = (int)8;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_DC = (int)330;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SUSPEND = (int)405;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CLEAR = (int)333;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_C3 = (int)457;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_RESET = (int)345;
	/// <i>native declaration : include\curses.h</i>
	public static final int TRUE = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_MOUSE_WHEEL_UP = (int)32;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_LHELP = (int)350;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_REDO = (int)369;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_MODIFIER_CONTROL = (int)134217728;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_C2 = (int)456;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON4_PRESSED = (int)65536;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_C1 = (int)455;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_B3 = (int)454;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_B2 = (int)453;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PADSLASH = (int)470;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_LEFT = (int)493;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_STOP = (int)502;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_COMMA = (int)501;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON1_RELEASED = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SCREATE = (int)380;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON5_DOUBLE_CLICKED = (int)8388608;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PADSLASH = (int)474;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_REFERENCE = (int)370;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_CLIP_EMPTY = (int)2;
	/// <i>native declaration : include\curses.h</i>
	public static final int OK = (int)0;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PADPLUS = (int)468;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_B1 = (int)452;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_A2 = (int)450;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_A1 = (int)449;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_A3 = (int)451;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CATAB = (int)342;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_END = (int)489;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_FIND = (int)360;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_STAB = (int)340;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_PADPLUS = (int)533;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_PADMINUS = (int)534;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_OPEN = (int)366;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PGDN = (int)446;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_WHITE = (int)7;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_PRESSED = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_REFRESH = (int)371;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD9 = (int)526;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_HOME = (int)447;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD6 = (int)523;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD5 = (int)522;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD8 = (int)525;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD7 = (int)524;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD2 = (int)519;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD1 = (int)518;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD4 = (int)521;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD3 = (int)520;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_DOUBLE_CLICKED = (int)3;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_MOVED = (int)5;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PAD0 = (int)517;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_IC = (int)537;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_CLIP_SUCCESS = (int)0;
	/// <i>native declaration : include\curses.h</i>
	public static final int PAD0 = (int)506;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_FSLASH = (int)503;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SMOVE = (int)393;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_MODIFIER_MASK = (int)56;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SLEFT = (int)391;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SRESET = (int)344;
	/// <i>native declaration : include\curses.h</i>
	public static final int PADPLUS = (int)465;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_VER_MINOR = (int)9;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_BSLASH = (int)528;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_UP = (int)490;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PADENTER = (int)461;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CLOSE = (int)354;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SCOMMAND = (int)378;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SUP = (int)547;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SSUSPEND = (int)403;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PADPLUS = (int)472;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_MIN = (int)257;
	/// <i>native declaration : include\curses.h</i>
	public static final int __PDCURSES__ = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON4_DOUBLE_CLICKED = (int)262144;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_MODIFIER_ALT = (int)268435456;
	/// <i>native declaration : include\curses.h</i>
	public static final int PADMINUS = (int)464;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_MARK = (int)362;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SHELP = (int)349;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_BACKSPACE = (int)263;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_PPAGE = (int)339;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_BKSP = (int)505;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON3_CLICKED = (int)4096;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_NEXT = (int)365;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_BUTTON_ALT = (int)32;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SELECT = (int)383;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON2_MOVED = (int)512;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_KEY_MODIFIER_ALT = (int)4;
	/// <i>native declaration : include\curses.h</i>
	public static final int CHTYPE_LONG = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_MAGENTA = (int)(4 | 1);
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SCOPY = (int)379;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON3_DOUBLE_CLICKED = (int)8192;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_DOWN = (int)481;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON3_MOVED = (int)16384;
	/// <i>native declaration : include\curses.h</i>
	public static final int PADENTER = (int)459;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PGUP = (int)487;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON5_PRESSED = (int)2097152;
	/// <i>native declaration : include\curses.h</i>
	public static final int FALSE = (int)0;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_PRINT = (int)346;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_HELP = (int)361;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_CLIP_MEMORY_ERROR = (int)3;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_OPTIONS = (int)367;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PADMINUS = (int)473;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON1_DOUBLE_CLICKED = (int)8;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_BLACK = (int)0;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_FQUOTE = (int)500;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON2_RELEASED = (int)32;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_PADENTER = (int)530;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PADSTOP = (int)466;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SUNDO = (int)404;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SHOME = (int)388;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON2_PRESSED = (int)64;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_MESSAGE = (int)363;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SOPTIONS = (int)395;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_PADSTAR = (int)532;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CONTROL_R = (int)543;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SREPLACE = (int)399;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_BUTTON_CONTROL = (int)16;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON5_CLICKED = (int)4194304;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_COPY = (int)356;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_TAB = (int)483;
	/// <i>native declaration : include\curses.h</i>
	public static final int SHF_DC = (int)538;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CONTROL_L = (int)542;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CREATE = (int)357;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON2_DOUBLE_CLICKED = (int)256;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD9 = (int)516;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD7 = (int)514;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD8 = (int)515;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SEXIT = (int)386;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_KEY_MODIFIER_SHIFT = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD1 = (int)508;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD2 = (int)509;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_UP = (int)259;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD0 = (int)507;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD5 = (int)512;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD6 = (int)513;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD3 = (int)510;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PAD4 = (int)511;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_BREAK = (int)257;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_MOUSE_WHEEL_LEFT = (int)128;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PADMINUS = (int)469;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_RBRACKET = (int)498;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SBEG = (int)376;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SRIGHT = (int)400;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_END = (int)448;
	/// <i>native declaration : include\curses.h</i>
	public static final int PADSTAR = (int)463;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_NPAGE = (int)338;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_MOVE = (int)364;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_PADSTOP = (int)476;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_KEY_MODIFIER_NUMLOCK = (int)8;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SF = (int)336;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON5_RELEASED = (int)1048576;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SR = (int)337;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON3_TRIPLE_CLICKED = (int)16384;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_REPLACE = (int)372;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDCURSES = (int)1;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_COMMAND = (int)355;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_BUTTON_SHIFT = (int)8;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_BTAB = (int)351;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SEND = (int)384;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON_CLICKED = (int)2;
	/// <i>native declaration : include\curses.h</i>
	public static final int COLOR_GREEN = (int)2;
	/// <i>native declaration : include\curses.h</i>
	public static final int ALT_LBRACKET = (int)497;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SDOWN = (int)548;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_SEOL = (int)385;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_MOUSE_POSITION = (int)16;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON1_PRESSED = (int)2;
	/// <i>native declaration : include\curses.h</i>
	public static final int KEY_CODE_YES = (int)256;
	/// <i>native declaration : include\curses.h</i>
	public static final int PDC_MOUSE_WHEEL_RIGHT = (int)256;
	/// <i>native declaration : include\curses.h</i>
	public static final int CTL_PADCENTER = (int)467;
	/// <i>native declaration : include\curses.h</i>
	public static final int BUTTON4_CLICKED = (int)131072;
	/// <i>native declaration : include\curses.h:0</i>
	/// <i>native declaration : include\curses.h:0</i>
	public static abstract class ripoffline_arg1_callback extends Callback<ripoffline_arg1_callback > {
		abstract public int apply(Pointer<WINDOW > WINDOWPtr1, int int1);
	};
	/// <i>native declaration : include\curses.h:0</i>
	/// <i>native declaration : include\curses.h:0</i>
	public static abstract class vidputs_arg1_callback extends Callback<vidputs_arg1_callback > {
		abstract public int apply(int int1);
	};
	/// <i>native declaration : include\curses.h:0</i>
	/// <i>native declaration : include\curses.h:0</i>
	public static abstract class vid_puts_arg1_callback extends Callback<vid_puts_arg1_callback > {
		abstract public int apply(int int1);
	};
	/**
	 * Original signature : <code>int addch(const chtype)</code><br>
	 * <i>native declaration : include\curses.h:851</i>
	 */
	native public static int addch(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int addchnstr(const chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:852</i>
	 */
	public static int addchnstr(Pointer<org.bridj.CLong > chtypePtr1, int int1) {
		return addchnstr(Pointer.getPeer(chtypePtr1), int1);
	}
	protected native static int addchnstr(@Ptr long chtypePtr1, int int1);
	/**
	 * Original signature : <code>int addchstr(const chtype*)</code><br>
	 * <i>native declaration : include\curses.h:853</i>
	 */
	public static int addchstr(Pointer<org.bridj.CLong > chtypePtr1) {
		return addchstr(Pointer.getPeer(chtypePtr1));
	}
	protected native static int addchstr(@Ptr long chtypePtr1);
	/**
	 * Original signature : <code>int addnstr(const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:854</i>
	 */
	public static int addnstr(Pointer<Byte > charPtr1, int int1) {
		return addnstr(Pointer.getPeer(charPtr1), int1);
	}
	protected native static int addnstr(@Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int addstr(const char*)</code><br>
	 * <i>native declaration : include\curses.h:855</i>
	 */
	public static int addstr(Pointer<Byte > charPtr1) {
		return addstr(Pointer.getPeer(charPtr1));
	}
	protected native static int addstr(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int attroff(chtype)</code><br>
	 * <i>native declaration : include\curses.h:856</i>
	 */
	native public static int attroff(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int attron(chtype)</code><br>
	 * <i>native declaration : include\curses.h:857</i>
	 */
	native public static int attron(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int attrset(chtype)</code><br>
	 * <i>native declaration : include\curses.h:858</i>
	 */
	native public static int attrset(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int attr_get(attr_t*, short*, void*)</code><br>
	 * <i>native declaration : include\curses.h:859</i>
	 */
	public static int attr_get(Pointer<org.bridj.CLong > attr_tPtr1, Pointer<Short > sPtr1, Pointer<? > voidPtr1) {
		return attr_get(Pointer.getPeer(attr_tPtr1), Pointer.getPeer(sPtr1), Pointer.getPeer(voidPtr1));
	}
	protected native static int attr_get(@Ptr long attr_tPtr1, @Ptr long sPtr1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int attr_off(attr_t, void*)</code><br>
	 * <i>native declaration : include\curses.h:860</i>
	 */
	public static int attr_off(@org.bridj.ann.CLong long attr_t1, Pointer<? > voidPtr1) {
		return attr_off(attr_t1, Pointer.getPeer(voidPtr1));
	}
	protected native static int attr_off(@org.bridj.ann.CLong long attr_t1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int attr_on(attr_t, void*)</code><br>
	 * <i>native declaration : include\curses.h:861</i>
	 */
	public static int attr_on(@org.bridj.ann.CLong long attr_t1, Pointer<? > voidPtr1) {
		return attr_on(attr_t1, Pointer.getPeer(voidPtr1));
	}
	protected native static int attr_on(@org.bridj.ann.CLong long attr_t1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int attr_set(attr_t, short, void*)</code><br>
	 * <i>native declaration : include\curses.h:862</i>
	 */
	public static int attr_set(@org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return attr_set(attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int attr_set(@org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int baudrate()</code><br>
	 * <i>native declaration : include\curses.h:863</i>
	 */
	native public static int baudrate();
	/**
	 * Original signature : <code>int beep()</code><br>
	 * <i>native declaration : include\curses.h:864</i>
	 */
	native public static int beep();
	/**
	 * Original signature : <code>int bkgd(chtype)</code><br>
	 * <i>native declaration : include\curses.h:865</i>
	 */
	native public static int bkgd(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>void bkgdset(chtype)</code><br>
	 * <i>native declaration : include\curses.h:866</i>
	 */
	native public static void bkgdset(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int border(chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype)</code><br>
	 * <i>native declaration : include\curses.h:867</i>
	 */
	native public static int border(@org.bridj.ann.CLong long chtype1, @org.bridj.ann.CLong long chtype2, @org.bridj.ann.CLong long chtype3, @org.bridj.ann.CLong long chtype4, @org.bridj.ann.CLong long chtype5, @org.bridj.ann.CLong long chtype6, @org.bridj.ann.CLong long chtype7, @org.bridj.ann.CLong long chtype8);
	/**
	 * Original signature : <code>int box(WINDOW*, chtype, chtype)</code><br>
	 * <i>native declaration : include\curses.h:869</i>
	 */
	public static int box(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1, @org.bridj.ann.CLong long chtype2) {
		return box(Pointer.getPeer(WINDOWPtr1), chtype1, chtype2);
	}
	protected native static int box(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1, @org.bridj.ann.CLong long chtype2);
	/**
	 * Original signature : <code>_bool can_change_color()</code><br>
	 * <i>native declaration : include\curses.h:870</i>
	 */
	native public static byte can_change_color();
	/**
	 * Original signature : <code>int cbreak()</code><br>
	 * <i>native declaration : include\curses.h:871</i>
	 */
	native public static int cbreak();
	/**
	 * Original signature : <code>int chgat(int, attr_t, short, const void*)</code><br>
	 * <i>native declaration : include\curses.h:872</i>
	 */
	public static int chgat(int int1, @org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return chgat(int1, attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int chgat(int int1, @org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int clearok(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:873</i>
	 */
	public static int clearok(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return clearok(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int clearok(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>int clear()</code><br>
	 * <i>native declaration : include\curses.h:874</i>
	 */
	native public static int clear();
	/**
	 * Original signature : <code>int clrtobot()</code><br>
	 * <i>native declaration : include\curses.h:875</i>
	 */
	native public static int clrtobot();
	/**
	 * Original signature : <code>int clrtoeol()</code><br>
	 * <i>native declaration : include\curses.h:876</i>
	 */
	native public static int clrtoeol();
	/**
	 * Original signature : <code>int color_content(short, short*, short*, short*)</code><br>
	 * <i>native declaration : include\curses.h:877</i>
	 */
	public static int color_content(short s1, Pointer<Short > sPtr1, Pointer<Short > sPtr2, Pointer<Short > sPtr3) {
		return color_content(s1, Pointer.getPeer(sPtr1), Pointer.getPeer(sPtr2), Pointer.getPeer(sPtr3));
	}
	protected native static int color_content(short s1, @Ptr long sPtr1, @Ptr long sPtr2, @Ptr long sPtr3);
	/**
	 * Original signature : <code>int color_set(short, void*)</code><br>
	 * <i>native declaration : include\curses.h:878</i>
	 */
	public static int color_set(short s1, Pointer<? > voidPtr1) {
		return color_set(s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int color_set(short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int copywin(const WINDOW*, WINDOW*, int, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:879</i>
	 */
	public static int copywin(Pointer<WINDOW > WINDOWPtr1, Pointer<WINDOW > WINDOWPtr2, int int1, int int2, int int3, int int4, int int5, int int6, int int7) {
		return copywin(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(WINDOWPtr2), int1, int2, int3, int4, int5, int6, int7);
	}
	protected native static int copywin(@Ptr long WINDOWPtr1, @Ptr long WINDOWPtr2, int int1, int int2, int int3, int int4, int int5, int int6, int int7);
	/**
	 * Original signature : <code>int curs_set(int)</code><br>
	 * <i>native declaration : include\curses.h:881</i>
	 */
	native public static int curs_set(int int1);
	/**
	 * Original signature : <code>int def_prog_mode()</code><br>
	 * <i>native declaration : include\curses.h:882</i>
	 */
	native public static int def_prog_mode();
	/**
	 * Original signature : <code>int def_shell_mode()</code><br>
	 * <i>native declaration : include\curses.h:883</i>
	 */
	native public static int def_shell_mode();
	/**
	 * Original signature : <code>int delay_output(int)</code><br>
	 * <i>native declaration : include\curses.h:884</i>
	 */
	native public static int delay_output(int int1);
	/**
	 * Original signature : <code>int delch()</code><br>
	 * <i>native declaration : include\curses.h:885</i>
	 */
	native public static int delch();
	/**
	 * Original signature : <code>int deleteln()</code><br>
	 * <i>native declaration : include\curses.h:886</i>
	 */
	native public static int deleteln();
	/**
	 * Original signature : <code>void delscreen(SCREEN*)</code><br>
	 * <i>native declaration : include\curses.h:887</i>
	 */
	public static void delscreen(Pointer<SCREEN > SCREENPtr1) {
		delscreen(Pointer.getPeer(SCREENPtr1));
	}
	protected native static void delscreen(@Ptr long SCREENPtr1);
	/**
	 * Original signature : <code>int delwin(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:888</i>
	 */
	public static int delwin(Pointer<WINDOW > WINDOWPtr1) {
		return delwin(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int delwin(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>WINDOW* derwin(WINDOW*, int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:889</i>
	 */
	public static Pointer<WINDOW > derwin(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, int int3, int int4) {
		return Pointer.pointerToAddress(derwin(Pointer.getPeer(WINDOWPtr1), int1, int2, int3, int4), WINDOW.class);
	}
	@Ptr 
	protected native static long derwin(@Ptr long WINDOWPtr1, int int1, int int2, int int3, int int4);
	/**
	 * Original signature : <code>int doupdate()</code><br>
	 * <i>native declaration : include\curses.h:890</i>
	 */
	native public static int doupdate();
	/**
	 * Original signature : <code>WINDOW* dupwin(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:891</i>
	 */
	public static Pointer<WINDOW > dupwin(Pointer<WINDOW > WINDOWPtr1) {
		return Pointer.pointerToAddress(dupwin(Pointer.getPeer(WINDOWPtr1)), WINDOW.class);
	}
	@Ptr 
	protected native static long dupwin(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int echochar(const chtype)</code><br>
	 * <i>native declaration : include\curses.h:892</i>
	 */
	native public static int echochar(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int echo()</code><br>
	 * <i>native declaration : include\curses.h:893</i>
	 */
	native public static int echo();
	/**
	 * Original signature : <code>int endwin()</code><br>
	 * <i>native declaration : include\curses.h:894</i>
	 */
	native public static int endwin();
	/**
	 * Original signature : <code>char erasechar()</code><br>
	 * <i>native declaration : include\curses.h:895</i>
	 */
	native public static byte erasechar();
	/**
	 * Original signature : <code>int erase()</code><br>
	 * <i>native declaration : include\curses.h:896</i>
	 */
	native public static int erase();
	/**
	 * Original signature : <code>void filter()</code><br>
	 * <i>native declaration : include\curses.h:897</i>
	 */
	native public static void filter();
	/**
	 * Original signature : <code>int flash()</code><br>
	 * <i>native declaration : include\curses.h:898</i>
	 */
	native public static int flash();
	/**
	 * Original signature : <code>int flushinp()</code><br>
	 * <i>native declaration : include\curses.h:899</i>
	 */
	native public static int flushinp();
	/**
	 * Original signature : <code>chtype getbkgd(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:900</i>
	 */
	@org.bridj.ann.CLong 
	public static long getbkgd(Pointer<WINDOW > WINDOWPtr1) {
		return getbkgd(Pointer.getPeer(WINDOWPtr1));
	}
	@org.bridj.ann.CLong 
	protected native static long getbkgd(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getnstr(char*, int)</code><br>
	 * <i>native declaration : include\curses.h:901</i>
	 */
	public static int getnstr(Pointer<Byte > charPtr1, int int1) {
		return getnstr(Pointer.getPeer(charPtr1), int1);
	}
	protected native static int getnstr(@Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int getstr(char*)</code><br>
	 * <i>native declaration : include\curses.h:902</i>
	 */
	public static int getstr(Pointer<Byte > charPtr1) {
		return getstr(Pointer.getPeer(charPtr1));
	}
	protected native static int getstr(@Ptr long charPtr1);
	/**
	 * Original signature : <code>WINDOW* getwin(FILE*)</code><br>
	 * <i>native declaration : include\curses.h:903</i>
	 */
	public static Pointer<WINDOW > getwin(Pointer<PdcursesLibrary.FILE > FILEPtr1) {
		return Pointer.pointerToAddress(getwin(Pointer.getPeer(FILEPtr1)), WINDOW.class);
	}
	@Ptr 
	protected native static long getwin(@Ptr long FILEPtr1);
	/**
	 * Original signature : <code>int halfdelay(int)</code><br>
	 * <i>native declaration : include\curses.h:904</i>
	 */
	native public static int halfdelay(int int1);
	/**
	 * Original signature : <code>_bool has_colors()</code><br>
	 * <i>native declaration : include\curses.h:905</i>
	 */
	native public static byte has_colors();
	/**
	 * Original signature : <code>_bool has_ic()</code><br>
	 * <i>native declaration : include\curses.h:906</i>
	 */
	native public static byte has_ic();
	/**
	 * Original signature : <code>_bool has_il()</code><br>
	 * <i>native declaration : include\curses.h:907</i>
	 */
	native public static byte has_il();
	/**
	 * Original signature : <code>int hline(chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:908</i>
	 */
	native public static int hline(@org.bridj.ann.CLong long chtype1, int int1);
	/**
	 * Original signature : <code>void idcok(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:909</i>
	 */
	public static void idcok(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		idcok(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static void idcok(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>int idlok(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:910</i>
	 */
	public static int idlok(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return idlok(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int idlok(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>void immedok(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:911</i>
	 */
	public static void immedok(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		immedok(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static void immedok(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>int inchnstr(chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:912</i>
	 */
	public static int inchnstr(Pointer<org.bridj.CLong > chtypePtr1, int int1) {
		return inchnstr(Pointer.getPeer(chtypePtr1), int1);
	}
	protected native static int inchnstr(@Ptr long chtypePtr1, int int1);
	/**
	 * Original signature : <code>int inchstr(chtype*)</code><br>
	 * <i>native declaration : include\curses.h:913</i>
	 */
	public static int inchstr(Pointer<org.bridj.CLong > chtypePtr1) {
		return inchstr(Pointer.getPeer(chtypePtr1));
	}
	protected native static int inchstr(@Ptr long chtypePtr1);
	/**
	 * Original signature : <code>chtype inch()</code><br>
	 * <i>native declaration : include\curses.h:914</i>
	 */
	@org.bridj.ann.CLong 
	native public static long inch();
	/**
	 * Original signature : <code>int init_color(short, short, short, short)</code><br>
	 * <i>native declaration : include\curses.h:915</i>
	 */
	native public static int init_color(short s1, short s2, short s3, short s4);
	/**
	 * Original signature : <code>int init_pair(short, short, short)</code><br>
	 * <i>native declaration : include\curses.h:916</i>
	 */
	native public static int init_pair(short s1, short s2, short s3);
	/**
	 * Original signature : <code>WINDOW* initscr()</code><br>
	 * <i>native declaration : include\curses.h:917</i>
	 */
	public static Pointer<WINDOW > initscr() {
		return Pointer.pointerToAddress(initscr$2(), WINDOW.class);
	}
	@Ptr 
	@Name("initscr") 
	protected native static long initscr$2();
	/**
	 * Original signature : <code>int innstr(char*, int)</code><br>
	 * <i>native declaration : include\curses.h:918</i>
	 */
	public static int innstr(Pointer<Byte > charPtr1, int int1) {
		return innstr(Pointer.getPeer(charPtr1), int1);
	}
	protected native static int innstr(@Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int insch(chtype)</code><br>
	 * <i>native declaration : include\curses.h:919</i>
	 */
	native public static int insch(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int insdelln(int)</code><br>
	 * <i>native declaration : include\curses.h:920</i>
	 */
	native public static int insdelln(int int1);
	/**
	 * Original signature : <code>int insertln()</code><br>
	 * <i>native declaration : include\curses.h:921</i>
	 */
	native public static int insertln();
	/**
	 * Original signature : <code>int insnstr(const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:922</i>
	 */
	public static int insnstr(Pointer<Byte > charPtr1, int int1) {
		return insnstr(Pointer.getPeer(charPtr1), int1);
	}
	protected native static int insnstr(@Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int insstr(const char*)</code><br>
	 * <i>native declaration : include\curses.h:923</i>
	 */
	public static int insstr(Pointer<Byte > charPtr1) {
		return insstr(Pointer.getPeer(charPtr1));
	}
	protected native static int insstr(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int instr(char*)</code><br>
	 * <i>native declaration : include\curses.h:924</i>
	 */
	public static int instr(Pointer<Byte > charPtr1) {
		return instr(Pointer.getPeer(charPtr1));
	}
	protected native static int instr(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int intrflush(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:925</i>
	 */
	public static int intrflush(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return intrflush(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int intrflush(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>_bool isendwin()</code><br>
	 * <i>native declaration : include\curses.h:926</i>
	 */
	native public static byte isendwin();
	/**
	 * Original signature : <code>_bool is_linetouched(WINDOW*, int)</code><br>
	 * <i>native declaration : include\curses.h:927</i>
	 */
	public static byte is_linetouched(Pointer<WINDOW > WINDOWPtr1, int int1) {
		return is_linetouched(Pointer.getPeer(WINDOWPtr1), int1);
	}
	protected native static byte is_linetouched(@Ptr long WINDOWPtr1, int int1);
	/**
	 * Original signature : <code>_bool is_wintouched(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:928</i>
	 */
	public static byte is_wintouched(Pointer<WINDOW > WINDOWPtr1) {
		return is_wintouched(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static byte is_wintouched(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>char* keyname(int)</code><br>
	 * <i>native declaration : include\curses.h:929</i>
	 */
	public static Pointer<Byte > keyname(int int1) {
		return Pointer.pointerToAddress(keyname$2(int1), Byte.class);
	}
	@Ptr 
	@Name("keyname") 
	protected native static long keyname$2(int int1);
	/**
	 * Original signature : <code>int keypad(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:930</i>
	 */
	public static int keypad(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return keypad(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int keypad(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>char killchar()</code><br>
	 * <i>native declaration : include\curses.h:931</i>
	 */
	native public static byte killchar();
	/**
	 * Original signature : <code>int leaveok(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:932</i>
	 */
	public static int leaveok(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return leaveok(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int leaveok(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>char* longname()</code><br>
	 * <i>native declaration : include\curses.h:933</i>
	 */
	public static Pointer<Byte > longname() {
		return Pointer.pointerToAddress(longname$2(), Byte.class);
	}
	@Ptr 
	@Name("longname") 
	protected native static long longname$2();
	/**
	 * Original signature : <code>int meta(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:934</i>
	 */
	public static int meta(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return meta(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int meta(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>int move(int, int)</code><br>
	 * <i>native declaration : include\curses.h:935</i>
	 */
	native public static int move(int int1, int int2);
	/**
	 * Original signature : <code>int mvaddch(int, int, const chtype)</code><br>
	 * <i>native declaration : include\curses.h:936</i>
	 */
	native public static int mvaddch(int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int mvaddchnstr(int, int, const chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:937</i>
	 */
	public static int mvaddchnstr(int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1, int int3) {
		return mvaddchnstr(int1, int2, Pointer.getPeer(chtypePtr1), int3);
	}
	protected native static int mvaddchnstr(int int1, int int2, @Ptr long chtypePtr1, int int3);
	/**
	 * Original signature : <code>int mvaddchstr(int, int, const chtype*)</code><br>
	 * <i>native declaration : include\curses.h:938</i>
	 */
	public static int mvaddchstr(int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1) {
		return mvaddchstr(int1, int2, Pointer.getPeer(chtypePtr1));
	}
	protected native static int mvaddchstr(int int1, int int2, @Ptr long chtypePtr1);
	/**
	 * Original signature : <code>int mvaddnstr(int, int, const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:939</i>
	 */
	public static int mvaddnstr(int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvaddnstr(int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvaddnstr(int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvaddstr(int, int, const char*)</code><br>
	 * <i>native declaration : include\curses.h:940</i>
	 */
	public static int mvaddstr(int int1, int int2, Pointer<Byte > charPtr1) {
		return mvaddstr(int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvaddstr(int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvchgat(int, int, int, attr_t, short, const void*)</code><br>
	 * <i>native declaration : include\curses.h:941</i>
	 */
	public static int mvchgat(int int1, int int2, int int3, @org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return mvchgat(int1, int2, int3, attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int mvchgat(int int1, int int2, int int3, @org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int mvcur(int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:942</i>
	 */
	native public static int mvcur(int int1, int int2, int int3, int int4);
	/**
	 * Original signature : <code>int mvdelch(int, int)</code><br>
	 * <i>native declaration : include\curses.h:943</i>
	 */
	native public static int mvdelch(int int1, int int2);
	/**
	 * Original signature : <code>int mvderwin(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:944</i>
	 */
	public static int mvderwin(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return mvderwin(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int mvderwin(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int mvgetch(int, int)</code><br>
	 * <i>native declaration : include\curses.h:945</i>
	 */
	native public static int mvgetch(int int1, int int2);
	/**
	 * Original signature : <code>int mvgetnstr(int, int, char*, int)</code><br>
	 * <i>native declaration : include\curses.h:946</i>
	 */
	public static int mvgetnstr(int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvgetnstr(int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvgetnstr(int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvgetstr(int, int, char*)</code><br>
	 * <i>native declaration : include\curses.h:947</i>
	 */
	public static int mvgetstr(int int1, int int2, Pointer<Byte > charPtr1) {
		return mvgetstr(int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvgetstr(int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvhline(int, int, chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:948</i>
	 */
	native public static int mvhline(int int1, int int2, @org.bridj.ann.CLong long chtype1, int int3);
	/**
	 * Original signature : <code>chtype mvinch(int, int)</code><br>
	 * <i>native declaration : include\curses.h:949</i>
	 */
	@org.bridj.ann.CLong 
	native public static long mvinch(int int1, int int2);
	/**
	 * Original signature : <code>int mvinchnstr(int, int, chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:950</i>
	 */
	public static int mvinchnstr(int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1, int int3) {
		return mvinchnstr(int1, int2, Pointer.getPeer(chtypePtr1), int3);
	}
	protected native static int mvinchnstr(int int1, int int2, @Ptr long chtypePtr1, int int3);
	/**
	 * Original signature : <code>int mvinchstr(int, int, chtype*)</code><br>
	 * <i>native declaration : include\curses.h:951</i>
	 */
	public static int mvinchstr(int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1) {
		return mvinchstr(int1, int2, Pointer.getPeer(chtypePtr1));
	}
	protected native static int mvinchstr(int int1, int int2, @Ptr long chtypePtr1);
	/**
	 * Original signature : <code>int mvinnstr(int, int, char*, int)</code><br>
	 * <i>native declaration : include\curses.h:952</i>
	 */
	public static int mvinnstr(int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvinnstr(int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvinnstr(int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvinsch(int, int, chtype)</code><br>
	 * <i>native declaration : include\curses.h:953</i>
	 */
	native public static int mvinsch(int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int mvinsnstr(int, int, const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:954</i>
	 */
	public static int mvinsnstr(int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvinsnstr(int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvinsnstr(int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvinsstr(int, int, const char*)</code><br>
	 * <i>native declaration : include\curses.h:955</i>
	 */
	public static int mvinsstr(int int1, int int2, Pointer<Byte > charPtr1) {
		return mvinsstr(int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvinsstr(int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvinstr(int, int, char*)</code><br>
	 * <i>native declaration : include\curses.h:956</i>
	 */
	public static int mvinstr(int int1, int int2, Pointer<Byte > charPtr1) {
		return mvinstr(int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvinstr(int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvprintw(int, int, const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:957</i>
	 */
	public static int mvprintw(int int1, int int2, Pointer<Byte > charPtr1, Object... varargs) {
		return mvprintw(int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvprintw(int int1, int int2, @Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int mvscanw(int, int, const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:958</i>
	 */
	public static int mvscanw(int int1, int int2, Pointer<Byte > charPtr1, Object... varargs) {
		return mvscanw(int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvscanw(int int1, int int2, @Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int mvvline(int, int, chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:959</i>
	 */
	native public static int mvvline(int int1, int int2, @org.bridj.ann.CLong long chtype1, int int3);
	/**
	 * Original signature : <code>int mvwaddchnstr(WINDOW*, int, int, const chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:960</i>
	 */
	public static int mvwaddchnstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1, int int3) {
		return mvwaddchnstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(chtypePtr1), int3);
	}
	protected native static int mvwaddchnstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long chtypePtr1, int int3);
	/**
	 * Original signature : <code>int mvwaddchstr(WINDOW*, int, int, const chtype*)</code><br>
	 * <i>native declaration : include\curses.h:961</i>
	 */
	public static int mvwaddchstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1) {
		return mvwaddchstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(chtypePtr1));
	}
	protected native static int mvwaddchstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long chtypePtr1);
	/**
	 * Original signature : <code>int mvwaddch(WINDOW*, int, int, const chtype)</code><br>
	 * <i>native declaration : include\curses.h:962</i>
	 */
	public static int mvwaddch(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1) {
		return mvwaddch(Pointer.getPeer(WINDOWPtr1), int1, int2, chtype1);
	}
	protected native static int mvwaddch(@Ptr long WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int mvwaddnstr(WINDOW*, int, int, const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:963</i>
	 */
	public static int mvwaddnstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvwaddnstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvwaddnstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvwaddstr(WINDOW*, int, int, const char*)</code><br>
	 * <i>native declaration : include\curses.h:964</i>
	 */
	public static int mvwaddstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1) {
		return mvwaddstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvwaddstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvwchgat(WINDOW*, int, int, int, attr_t, short, const void*)</code><br>
	 * <i>native declaration : include\curses.h:965</i>
	 */
	public static int mvwchgat(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, int int3, @org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return mvwchgat(Pointer.getPeer(WINDOWPtr1), int1, int2, int3, attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int mvwchgat(@Ptr long WINDOWPtr1, int int1, int int2, int int3, @org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int mvwdelch(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:966</i>
	 */
	public static int mvwdelch(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return mvwdelch(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int mvwdelch(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int mvwgetch(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:967</i>
	 */
	public static int mvwgetch(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return mvwgetch(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int mvwgetch(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int mvwgetnstr(WINDOW*, int, int, char*, int)</code><br>
	 * <i>native declaration : include\curses.h:968</i>
	 */
	public static int mvwgetnstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvwgetnstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvwgetnstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvwgetstr(WINDOW*, int, int, char*)</code><br>
	 * <i>native declaration : include\curses.h:969</i>
	 */
	public static int mvwgetstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1) {
		return mvwgetstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvwgetstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvwhline(WINDOW*, int, int, chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:970</i>
	 */
	public static int mvwhline(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1, int int3) {
		return mvwhline(Pointer.getPeer(WINDOWPtr1), int1, int2, chtype1, int3);
	}
	protected native static int mvwhline(@Ptr long WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1, int int3);
	/**
	 * Original signature : <code>int mvwinchnstr(WINDOW*, int, int, chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:971</i>
	 */
	public static int mvwinchnstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1, int int3) {
		return mvwinchnstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(chtypePtr1), int3);
	}
	protected native static int mvwinchnstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long chtypePtr1, int int3);
	/**
	 * Original signature : <code>int mvwinchstr(WINDOW*, int, int, chtype*)</code><br>
	 * <i>native declaration : include\curses.h:972</i>
	 */
	public static int mvwinchstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<org.bridj.CLong > chtypePtr1) {
		return mvwinchstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(chtypePtr1));
	}
	protected native static int mvwinchstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long chtypePtr1);
	/**
	 * Original signature : <code>chtype mvwinch(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:973</i>
	 */
	@org.bridj.ann.CLong 
	public static long mvwinch(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return mvwinch(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	@org.bridj.ann.CLong 
	protected native static long mvwinch(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int mvwinnstr(WINDOW*, int, int, char*, int)</code><br>
	 * <i>native declaration : include\curses.h:974</i>
	 */
	public static int mvwinnstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvwinnstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvwinnstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvwinsch(WINDOW*, int, int, chtype)</code><br>
	 * <i>native declaration : include\curses.h:975</i>
	 */
	public static int mvwinsch(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1) {
		return mvwinsch(Pointer.getPeer(WINDOWPtr1), int1, int2, chtype1);
	}
	protected native static int mvwinsch(@Ptr long WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int mvwinsnstr(WINDOW*, int, int, const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:976</i>
	 */
	public static int mvwinsnstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1, int int3) {
		return mvwinsnstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1), int3);
	}
	protected native static int mvwinsnstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1, int int3);
	/**
	 * Original signature : <code>int mvwinsstr(WINDOW*, int, int, const char*)</code><br>
	 * <i>native declaration : include\curses.h:977</i>
	 */
	public static int mvwinsstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1) {
		return mvwinsstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvwinsstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvwinstr(WINDOW*, int, int, char*)</code><br>
	 * <i>native declaration : include\curses.h:978</i>
	 */
	public static int mvwinstr(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1) {
		return mvwinstr(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvwinstr(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int mvwin(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:979</i>
	 */
	public static int mvwin(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return mvwin(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int mvwin(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int mvwprintw(WINDOW*, int, int, const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:980</i>
	 */
	public static int mvwprintw(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1, Object... varargs) {
		return mvwprintw(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvwprintw(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int mvwscanw(WINDOW*, int, int, const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:981</i>
	 */
	public static int mvwscanw(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, Pointer<Byte > charPtr1, Object... varargs) {
		return mvwscanw(Pointer.getPeer(WINDOWPtr1), int1, int2, Pointer.getPeer(charPtr1));
	}
	protected native static int mvwscanw(@Ptr long WINDOWPtr1, int int1, int int2, @Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int mvwvline(WINDOW*, int, int, chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:982</i>
	 */
	public static int mvwvline(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1, int int3) {
		return mvwvline(Pointer.getPeer(WINDOWPtr1), int1, int2, chtype1, int3);
	}
	protected native static int mvwvline(@Ptr long WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1, int int3);
	/**
	 * Original signature : <code>int napms(int)</code><br>
	 * <i>native declaration : include\curses.h:983</i>
	 */
	native public static int napms(int int1);
	/**
	 * Original signature : <code>WINDOW* newpad(int, int)</code><br>
	 * <i>native declaration : include\curses.h:984</i>
	 */
	public static Pointer<WINDOW > newpad(int int1, int int2) {
		return Pointer.pointerToAddress(newpad$2(int1, int2), WINDOW.class);
	}
	@Ptr 
	@Name("newpad") 
	protected native static long newpad$2(int int1, int int2);
	/**
	 * Original signature : <code>SCREEN* newterm(const char*, FILE*, FILE*)</code><br>
	 * <i>native declaration : include\curses.h:985</i>
	 */
	public static Pointer<SCREEN > newterm(Pointer<Byte > charPtr1, Pointer<PdcursesLibrary.FILE > FILEPtr1, Pointer<PdcursesLibrary.FILE > FILEPtr2) {
		return Pointer.pointerToAddress(newterm(Pointer.getPeer(charPtr1), Pointer.getPeer(FILEPtr1), Pointer.getPeer(FILEPtr2)), SCREEN.class);
	}
	@Ptr 
	protected native static long newterm(@Ptr long charPtr1, @Ptr long FILEPtr1, @Ptr long FILEPtr2);
	/**
	 * Original signature : <code>WINDOW* newwin(int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:986</i>
	 */
	public static Pointer<WINDOW > newwin(int int1, int int2, int int3, int int4) {
		return Pointer.pointerToAddress(newwin$2(int1, int2, int3, int4), WINDOW.class);
	}
	@Ptr 
	@Name("newwin") 
	protected native static long newwin$2(int int1, int int2, int int3, int int4);
	/**
	 * Original signature : <code>int nl()</code><br>
	 * <i>native declaration : include\curses.h:987</i>
	 */
	native public static int nl();
	/**
	 * Original signature : <code>int nocbreak()</code><br>
	 * <i>native declaration : include\curses.h:988</i>
	 */
	native public static int nocbreak();
	/**
	 * Original signature : <code>int nodelay(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:989</i>
	 */
	public static int nodelay(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return nodelay(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int nodelay(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>int noecho()</code><br>
	 * <i>native declaration : include\curses.h:990</i>
	 */
	native public static int noecho();
	/**
	 * Original signature : <code>int nonl()</code><br>
	 * <i>native declaration : include\curses.h:991</i>
	 */
	native public static int nonl();
	/**
	 * Original signature : <code>void noqiflush()</code><br>
	 * <i>native declaration : include\curses.h:992</i>
	 */
	native public static void noqiflush();
	/**
	 * Original signature : <code>int noraw()</code><br>
	 * <i>native declaration : include\curses.h:993</i>
	 */
	native public static int noraw();
	/**
	 * Original signature : <code>int notimeout(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:994</i>
	 */
	public static int notimeout(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return notimeout(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int notimeout(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>int overlay(const WINDOW*, WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:995</i>
	 */
	public static int overlay(Pointer<WINDOW > WINDOWPtr1, Pointer<WINDOW > WINDOWPtr2) {
		return overlay(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(WINDOWPtr2));
	}
	protected native static int overlay(@Ptr long WINDOWPtr1, @Ptr long WINDOWPtr2);
	/**
	 * Original signature : <code>int overwrite(const WINDOW*, WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:996</i>
	 */
	public static int overwrite(Pointer<WINDOW > WINDOWPtr1, Pointer<WINDOW > WINDOWPtr2) {
		return overwrite(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(WINDOWPtr2));
	}
	protected native static int overwrite(@Ptr long WINDOWPtr1, @Ptr long WINDOWPtr2);
	/**
	 * Original signature : <code>int pair_content(short, short*, short*)</code><br>
	 * <i>native declaration : include\curses.h:997</i>
	 */
	public static int pair_content(short s1, Pointer<Short > sPtr1, Pointer<Short > sPtr2) {
		return pair_content(s1, Pointer.getPeer(sPtr1), Pointer.getPeer(sPtr2));
	}
	protected native static int pair_content(short s1, @Ptr long sPtr1, @Ptr long sPtr2);
	/**
	 * Original signature : <code>int pechochar(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:998</i>
	 */
	public static int pechochar(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return pechochar(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int pechochar(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int pnoutrefresh(WINDOW*, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:999</i>
	 */
	public static int pnoutrefresh(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, int int3, int int4, int int5, int int6) {
		return pnoutrefresh(Pointer.getPeer(WINDOWPtr1), int1, int2, int3, int4, int5, int6);
	}
	protected native static int pnoutrefresh(@Ptr long WINDOWPtr1, int int1, int int2, int int3, int int4, int int5, int int6);
	/**
	 * Original signature : <code>int prefresh(WINDOW*, int, int, int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1000</i>
	 */
	public static int prefresh(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, int int3, int int4, int int5, int int6) {
		return prefresh(Pointer.getPeer(WINDOWPtr1), int1, int2, int3, int4, int5, int6);
	}
	protected native static int prefresh(@Ptr long WINDOWPtr1, int int1, int int2, int int3, int int4, int int5, int int6);
	/**
	 * Original signature : <code>int printw(const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:1001</i>
	 */
	public static int printw(Pointer<Byte > charPtr1, Object... varargs) {
		return printw(Pointer.getPeer(charPtr1));
	}
	protected native static int printw(@Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int putwin(WINDOW*, FILE*)</code><br>
	 * <i>native declaration : include\curses.h:1002</i>
	 */
	public static int putwin(Pointer<WINDOW > WINDOWPtr1, Pointer<PdcursesLibrary.FILE > FILEPtr1) {
		return putwin(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(FILEPtr1));
	}
	protected native static int putwin(@Ptr long WINDOWPtr1, @Ptr long FILEPtr1);
	/**
	 * Original signature : <code>void qiflush()</code><br>
	 * <i>native declaration : include\curses.h:1003</i>
	 */
	native public static void qiflush();
	/**
	 * Original signature : <code>int raw()</code><br>
	 * <i>native declaration : include\curses.h:1004</i>
	 */
	native public static int raw();
	/**
	 * Original signature : <code>int redrawwin(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1005</i>
	 */
	public static int redrawwin(Pointer<WINDOW > WINDOWPtr1) {
		return redrawwin(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int redrawwin(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int refresh()</code><br>
	 * <i>native declaration : include\curses.h:1006</i>
	 */
	native public static int refresh();
	/**
	 * Original signature : <code>int reset_prog_mode()</code><br>
	 * <i>native declaration : include\curses.h:1007</i>
	 */
	native public static int reset_prog_mode();
	/**
	 * Original signature : <code>int reset_shell_mode()</code><br>
	 * <i>native declaration : include\curses.h:1008</i>
	 */
	native public static int reset_shell_mode();
	/**
	 * Original signature : <code>int resetty()</code><br>
	 * <i>native declaration : include\curses.h:1009</i>
	 */
	native public static int resetty();
	/**
	 * Original signature : <code>int ripoffline(int, ripoffline_arg1_callback)</code><br>
	 * <i>native declaration : include\curses.h:1010</i>
	 */
	public static int ripoffline(int int1, Pointer<PdcursesLibrary.ripoffline_arg1_callback > arg1) {
		return ripoffline(int1, Pointer.getPeer(arg1));
	}
	protected native static int ripoffline(int int1, @Ptr long arg1);
	/**
	 * Original signature : <code>int savetty()</code><br>
	 * <i>native declaration : include\curses.h:1011</i>
	 */
	native public static int savetty();
	/**
	 * Original signature : <code>int scanw(const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:1012</i>
	 */
	public static int scanw(Pointer<Byte > charPtr1, Object... varargs) {
		return scanw(Pointer.getPeer(charPtr1));
	}
	protected native static int scanw(@Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int scr_dump(const char*)</code><br>
	 * <i>native declaration : include\curses.h:1013</i>
	 */
	public static int scr_dump(Pointer<Byte > charPtr1) {
		return scr_dump(Pointer.getPeer(charPtr1));
	}
	protected native static int scr_dump(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int scr_init(const char*)</code><br>
	 * <i>native declaration : include\curses.h:1014</i>
	 */
	public static int scr_init(Pointer<Byte > charPtr1) {
		return scr_init(Pointer.getPeer(charPtr1));
	}
	protected native static int scr_init(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int scr_restore(const char*)</code><br>
	 * <i>native declaration : include\curses.h:1015</i>
	 */
	public static int scr_restore(Pointer<Byte > charPtr1) {
		return scr_restore(Pointer.getPeer(charPtr1));
	}
	protected native static int scr_restore(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int scr_set(const char*)</code><br>
	 * <i>native declaration : include\curses.h:1016</i>
	 */
	public static int scr_set(Pointer<Byte > charPtr1) {
		return scr_set(Pointer.getPeer(charPtr1));
	}
	protected native static int scr_set(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int scrl(int)</code><br>
	 * <i>native declaration : include\curses.h:1017</i>
	 */
	native public static int scrl(int int1);
	/**
	 * Original signature : <code>int scroll(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1018</i>
	 */
	public static int scroll(Pointer<WINDOW > WINDOWPtr1) {
		return scroll(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int scroll(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int scrollok(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:1019</i>
	 */
	public static int scrollok(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return scrollok(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int scrollok(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>SCREEN* set_term(SCREEN*)</code><br>
	 * <i>native declaration : include\curses.h:1020</i>
	 */
	public static Pointer<SCREEN > set_term(Pointer<SCREEN > SCREENPtr1) {
		return Pointer.pointerToAddress(set_term(Pointer.getPeer(SCREENPtr1)), SCREEN.class);
	}
	@Ptr 
	protected native static long set_term(@Ptr long SCREENPtr1);
	/**
	 * Original signature : <code>int setscrreg(int, int)</code><br>
	 * <i>native declaration : include\curses.h:1021</i>
	 */
	native public static int setscrreg(int int1, int int2);
	/**
	 * Original signature : <code>int slk_attroff(const chtype)</code><br>
	 * <i>native declaration : include\curses.h:1022</i>
	 */
	native public static int slk_attroff(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int slk_attr_off(const attr_t, void*)</code><br>
	 * <i>native declaration : include\curses.h:1023</i>
	 */
	public static int slk_attr_off(@org.bridj.ann.CLong long attr_t1, Pointer<? > voidPtr1) {
		return slk_attr_off(attr_t1, Pointer.getPeer(voidPtr1));
	}
	protected native static int slk_attr_off(@org.bridj.ann.CLong long attr_t1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int slk_attron(const chtype)</code><br>
	 * <i>native declaration : include\curses.h:1024</i>
	 */
	native public static int slk_attron(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int slk_attr_on(const attr_t, void*)</code><br>
	 * <i>native declaration : include\curses.h:1025</i>
	 */
	public static int slk_attr_on(@org.bridj.ann.CLong long attr_t1, Pointer<? > voidPtr1) {
		return slk_attr_on(attr_t1, Pointer.getPeer(voidPtr1));
	}
	protected native static int slk_attr_on(@org.bridj.ann.CLong long attr_t1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int slk_attrset(const chtype)</code><br>
	 * <i>native declaration : include\curses.h:1026</i>
	 */
	native public static int slk_attrset(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int slk_attr_set(const attr_t, short, void*)</code><br>
	 * <i>native declaration : include\curses.h:1027</i>
	 */
	public static int slk_attr_set(@org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return slk_attr_set(attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int slk_attr_set(@org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int slk_clear()</code><br>
	 * <i>native declaration : include\curses.h:1028</i>
	 */
	native public static int slk_clear();
	/**
	 * Original signature : <code>int slk_color(short)</code><br>
	 * <i>native declaration : include\curses.h:1029</i>
	 */
	native public static int slk_color(short s1);
	/**
	 * Original signature : <code>int slk_init(int)</code><br>
	 * <i>native declaration : include\curses.h:1030</i>
	 */
	native public static int slk_init(int int1);
	/**
	 * Original signature : <code>char* slk_label(int)</code><br>
	 * <i>native declaration : include\curses.h:1031</i>
	 */
	public static Pointer<Byte > slk_label(int int1) {
		return Pointer.pointerToAddress(slk_label$2(int1), Byte.class);
	}
	@Ptr 
	@Name("slk_label") 
	protected native static long slk_label$2(int int1);
	/**
	 * Original signature : <code>int slk_noutrefresh()</code><br>
	 * <i>native declaration : include\curses.h:1032</i>
	 */
	native public static int slk_noutrefresh();
	/**
	 * Original signature : <code>int slk_refresh()</code><br>
	 * <i>native declaration : include\curses.h:1033</i>
	 */
	native public static int slk_refresh();
	/**
	 * Original signature : <code>int slk_restore()</code><br>
	 * <i>native declaration : include\curses.h:1034</i>
	 */
	native public static int slk_restore();
	/**
	 * Original signature : <code>int slk_set(int, const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:1035</i>
	 */
	public static int slk_set(int int1, Pointer<Byte > charPtr1, int int2) {
		return slk_set(int1, Pointer.getPeer(charPtr1), int2);
	}
	protected native static int slk_set(int int1, @Ptr long charPtr1, int int2);
	/**
	 * Original signature : <code>int slk_touch()</code><br>
	 * <i>native declaration : include\curses.h:1036</i>
	 */
	native public static int slk_touch();
	/**
	 * Original signature : <code>int standend()</code><br>
	 * <i>native declaration : include\curses.h:1037</i>
	 */
	native public static int standend();
	/**
	 * Original signature : <code>int standout()</code><br>
	 * <i>native declaration : include\curses.h:1038</i>
	 */
	native public static int standout();
	/**
	 * Original signature : <code>int start_color()</code><br>
	 * <i>native declaration : include\curses.h:1039</i>
	 */
	native public static int start_color();
	/**
	 * Original signature : <code>WINDOW* subpad(WINDOW*, int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1040</i>
	 */
	public static Pointer<WINDOW > subpad(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, int int3, int int4) {
		return Pointer.pointerToAddress(subpad(Pointer.getPeer(WINDOWPtr1), int1, int2, int3, int4), WINDOW.class);
	}
	@Ptr 
	protected native static long subpad(@Ptr long WINDOWPtr1, int int1, int int2, int int3, int int4);
	/**
	 * Original signature : <code>WINDOW* subwin(WINDOW*, int, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1041</i>
	 */
	public static Pointer<WINDOW > subwin(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, int int3, int int4) {
		return Pointer.pointerToAddress(subwin(Pointer.getPeer(WINDOWPtr1), int1, int2, int3, int4), WINDOW.class);
	}
	@Ptr 
	protected native static long subwin(@Ptr long WINDOWPtr1, int int1, int int2, int int3, int int4);
	/**
	 * Original signature : <code>int syncok(WINDOW*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:1042</i>
	 */
	public static int syncok(Pointer<WINDOW > WINDOWPtr1, byte _bool1) {
		return syncok(Pointer.getPeer(WINDOWPtr1), _bool1);
	}
	protected native static int syncok(@Ptr long WINDOWPtr1, byte _bool1);
	/**
	 * Original signature : <code>chtype termattrs()</code><br>
	 * <i>native declaration : include\curses.h:1043</i>
	 */
	@org.bridj.ann.CLong 
	native public static long termattrs();
	/**
	 * Original signature : <code>attr_t term_attrs()</code><br>
	 * <i>native declaration : include\curses.h:1044</i>
	 */
	@org.bridj.ann.CLong 
	native public static long term_attrs();
	/**
	 * Original signature : <code>char* termname()</code><br>
	 * <i>native declaration : include\curses.h:1045</i>
	 */
	public static Pointer<Byte > termname() {
		return Pointer.pointerToAddress(termname$2(), Byte.class);
	}
	@Ptr 
	@Name("termname") 
	protected native static long termname$2();
	/**
	 * Original signature : <code>void timeout(int)</code><br>
	 * <i>native declaration : include\curses.h:1046</i>
	 */
	native public static void timeout(int int1);
	/**
	 * Original signature : <code>int touchline(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1047</i>
	 */
	public static int touchline(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return touchline(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int touchline(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int touchwin(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1048</i>
	 */
	public static int touchwin(Pointer<WINDOW > WINDOWPtr1) {
		return touchwin(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int touchwin(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int typeahead(int)</code><br>
	 * <i>native declaration : include\curses.h:1049</i>
	 */
	native public static int typeahead(int int1);
	/**
	 * Original signature : <code>int untouchwin(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1050</i>
	 */
	public static int untouchwin(Pointer<WINDOW > WINDOWPtr1) {
		return untouchwin(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int untouchwin(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>void use_env(_bool)</code><br>
	 * <i>native declaration : include\curses.h:1051</i>
	 */
	native public static void use_env(byte _bool1);
	/**
	 * Original signature : <code>int vidattr(chtype)</code><br>
	 * <i>native declaration : include\curses.h:1052</i>
	 */
	native public static int vidattr(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int vid_attr(attr_t, short, void*)</code><br>
	 * <i>native declaration : include\curses.h:1053</i>
	 */
	public static int vid_attr(@org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return vid_attr(attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int vid_attr(@org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int vidputs(chtype, vidputs_arg1_callback)</code><br>
	 * <i>native declaration : include\curses.h:1054</i>
	 */
	public static int vidputs(@org.bridj.ann.CLong long chtype1, Pointer<PdcursesLibrary.vidputs_arg1_callback > arg1) {
		return vidputs(chtype1, Pointer.getPeer(arg1));
	}
	protected native static int vidputs(@org.bridj.ann.CLong long chtype1, @Ptr long arg1);
	/**
	 * Original signature : <code>int vid_puts(attr_t, short, void*, vid_puts_arg1_callback)</code><br>
	 * <i>native declaration : include\curses.h:1055</i>
	 */
	public static int vid_puts(@org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1, Pointer<PdcursesLibrary.vid_puts_arg1_callback > arg1) {
		return vid_puts(attr_t1, s1, Pointer.getPeer(voidPtr1), Pointer.getPeer(arg1));
	}
	protected native static int vid_puts(@org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1, @Ptr long arg1);
	/**
	 * Original signature : <code>int vline(chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:1056</i>
	 */
	native public static int vline(@org.bridj.ann.CLong long chtype1, int int1);
	/**
	 * Original signature : <code>int vw_printw(WINDOW*, const char*)</code><br>
	 * <i>native declaration : include\curses.h:1057</i>
	 */
	public static int vw_printw(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return vw_printw(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int vw_printw(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int vwprintw(WINDOW*, const char*)</code><br>
	 * <i>native declaration : include\curses.h:1058</i>
	 */
	public static int vwprintw(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return vwprintw(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int vwprintw(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int vw_scanw(WINDOW*, const char*)</code><br>
	 * <i>native declaration : include\curses.h:1059</i>
	 */
	public static int vw_scanw(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return vw_scanw(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int vw_scanw(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int vwscanw(WINDOW*, const char*)</code><br>
	 * <i>native declaration : include\curses.h:1060</i>
	 */
	public static int vwscanw(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return vwscanw(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int vwscanw(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int waddchnstr(WINDOW*, const chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:1061</i>
	 */
	public static int waddchnstr(Pointer<WINDOW > WINDOWPtr1, Pointer<org.bridj.CLong > chtypePtr1, int int1) {
		return waddchnstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(chtypePtr1), int1);
	}
	protected native static int waddchnstr(@Ptr long WINDOWPtr1, @Ptr long chtypePtr1, int int1);
	/**
	 * Original signature : <code>int waddchstr(WINDOW*, const chtype*)</code><br>
	 * <i>native declaration : include\curses.h:1062</i>
	 */
	public static int waddchstr(Pointer<WINDOW > WINDOWPtr1, Pointer<org.bridj.CLong > chtypePtr1) {
		return waddchstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(chtypePtr1));
	}
	protected native static int waddchstr(@Ptr long WINDOWPtr1, @Ptr long chtypePtr1);
	/**
	 * Original signature : <code>int waddch(WINDOW*, const chtype)</code><br>
	 * <i>native declaration : include\curses.h:1063</i>
	 */
	public static int waddch(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return waddch(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int waddch(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int waddnstr(WINDOW*, const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:1064</i>
	 */
	public static int waddnstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1, int int1) {
		return waddnstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1), int1);
	}
	protected native static int waddnstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int waddstr(WINDOW*, const char*)</code><br>
	 * <i>native declaration : include\curses.h:1065</i>
	 */
	public static int waddstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return waddstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int waddstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int wattroff(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1066</i>
	 */
	public static int wattroff(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return wattroff(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int wattroff(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int wattron(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1067</i>
	 */
	public static int wattron(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return wattron(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int wattron(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int wattrset(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1068</i>
	 */
	public static int wattrset(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return wattrset(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int wattrset(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int wattr_get(WINDOW*, attr_t*, short*, void*)</code><br>
	 * <i>native declaration : include\curses.h:1069</i>
	 */
	public static int wattr_get(Pointer<WINDOW > WINDOWPtr1, Pointer<org.bridj.CLong > attr_tPtr1, Pointer<Short > sPtr1, Pointer<? > voidPtr1) {
		return wattr_get(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(attr_tPtr1), Pointer.getPeer(sPtr1), Pointer.getPeer(voidPtr1));
	}
	protected native static int wattr_get(@Ptr long WINDOWPtr1, @Ptr long attr_tPtr1, @Ptr long sPtr1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int wattr_off(WINDOW*, attr_t, void*)</code><br>
	 * <i>native declaration : include\curses.h:1070</i>
	 */
	public static int wattr_off(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long attr_t1, Pointer<? > voidPtr1) {
		return wattr_off(Pointer.getPeer(WINDOWPtr1), attr_t1, Pointer.getPeer(voidPtr1));
	}
	protected native static int wattr_off(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long attr_t1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int wattr_on(WINDOW*, attr_t, void*)</code><br>
	 * <i>native declaration : include\curses.h:1071</i>
	 */
	public static int wattr_on(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long attr_t1, Pointer<? > voidPtr1) {
		return wattr_on(Pointer.getPeer(WINDOWPtr1), attr_t1, Pointer.getPeer(voidPtr1));
	}
	protected native static int wattr_on(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long attr_t1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int wattr_set(WINDOW*, attr_t, short, void*)</code><br>
	 * <i>native declaration : include\curses.h:1072</i>
	 */
	public static int wattr_set(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return wattr_set(Pointer.getPeer(WINDOWPtr1), attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int wattr_set(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>void wbkgdset(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1073</i>
	 */
	public static void wbkgdset(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		wbkgdset(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static void wbkgdset(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int wbkgd(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1074</i>
	 */
	public static int wbkgd(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return wbkgd(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int wbkgd(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int wborder(WINDOW*, chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1075</i>
	 */
	public static int wborder(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1, @org.bridj.ann.CLong long chtype2, @org.bridj.ann.CLong long chtype3, @org.bridj.ann.CLong long chtype4, @org.bridj.ann.CLong long chtype5, @org.bridj.ann.CLong long chtype6, @org.bridj.ann.CLong long chtype7, @org.bridj.ann.CLong long chtype8) {
		return wborder(Pointer.getPeer(WINDOWPtr1), chtype1, chtype2, chtype3, chtype4, chtype5, chtype6, chtype7, chtype8);
	}
	protected native static int wborder(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1, @org.bridj.ann.CLong long chtype2, @org.bridj.ann.CLong long chtype3, @org.bridj.ann.CLong long chtype4, @org.bridj.ann.CLong long chtype5, @org.bridj.ann.CLong long chtype6, @org.bridj.ann.CLong long chtype7, @org.bridj.ann.CLong long chtype8);
	/**
	 * Original signature : <code>int wchgat(WINDOW*, int, attr_t, short, const void*)</code><br>
	 * <i>native declaration : include\curses.h:1077</i>
	 */
	public static int wchgat(Pointer<WINDOW > WINDOWPtr1, int int1, @org.bridj.ann.CLong long attr_t1, short s1, Pointer<? > voidPtr1) {
		return wchgat(Pointer.getPeer(WINDOWPtr1), int1, attr_t1, s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int wchgat(@Ptr long WINDOWPtr1, int int1, @org.bridj.ann.CLong long attr_t1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>int wclear(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1078</i>
	 */
	public static int wclear(Pointer<WINDOW > WINDOWPtr1) {
		return wclear(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wclear(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wclrtobot(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1079</i>
	 */
	public static int wclrtobot(Pointer<WINDOW > WINDOWPtr1) {
		return wclrtobot(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wclrtobot(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wclrtoeol(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1080</i>
	 */
	public static int wclrtoeol(Pointer<WINDOW > WINDOWPtr1) {
		return wclrtoeol(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wclrtoeol(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wcolor_set(WINDOW*, short, void*)</code><br>
	 * <i>native declaration : include\curses.h:1081</i>
	 */
	public static int wcolor_set(Pointer<WINDOW > WINDOWPtr1, short s1, Pointer<? > voidPtr1) {
		return wcolor_set(Pointer.getPeer(WINDOWPtr1), s1, Pointer.getPeer(voidPtr1));
	}
	protected native static int wcolor_set(@Ptr long WINDOWPtr1, short s1, @Ptr long voidPtr1);
	/**
	 * Original signature : <code>void wcursyncup(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1082</i>
	 */
	public static void wcursyncup(Pointer<WINDOW > WINDOWPtr1) {
		wcursyncup(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static void wcursyncup(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wdelch(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1083</i>
	 */
	public static int wdelch(Pointer<WINDOW > WINDOWPtr1) {
		return wdelch(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wdelch(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wdeleteln(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1084</i>
	 */
	public static int wdeleteln(Pointer<WINDOW > WINDOWPtr1) {
		return wdeleteln(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wdeleteln(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wechochar(WINDOW*, const chtype)</code><br>
	 * <i>native declaration : include\curses.h:1085</i>
	 */
	public static int wechochar(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return wechochar(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int wechochar(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int werase(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1086</i>
	 */
	public static int werase(Pointer<WINDOW > WINDOWPtr1) {
		return werase(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int werase(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wgetch(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1087</i>
	 */
	public static int wgetch(Pointer<WINDOW > WINDOWPtr1) {
		return wgetch(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wgetch(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wgetnstr(WINDOW*, char*, int)</code><br>
	 * <i>native declaration : include\curses.h:1088</i>
	 */
	public static int wgetnstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1, int int1) {
		return wgetnstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1), int1);
	}
	protected native static int wgetnstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int wgetstr(WINDOW*, char*)</code><br>
	 * <i>native declaration : include\curses.h:1089</i>
	 */
	public static int wgetstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return wgetstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int wgetstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int whline(WINDOW*, chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:1090</i>
	 */
	public static int whline(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1, int int1) {
		return whline(Pointer.getPeer(WINDOWPtr1), chtype1, int1);
	}
	protected native static int whline(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1, int int1);
	/**
	 * Original signature : <code>int winchnstr(WINDOW*, chtype*, int)</code><br>
	 * <i>native declaration : include\curses.h:1091</i>
	 */
	public static int winchnstr(Pointer<WINDOW > WINDOWPtr1, Pointer<org.bridj.CLong > chtypePtr1, int int1) {
		return winchnstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(chtypePtr1), int1);
	}
	protected native static int winchnstr(@Ptr long WINDOWPtr1, @Ptr long chtypePtr1, int int1);
	/**
	 * Original signature : <code>int winchstr(WINDOW*, chtype*)</code><br>
	 * <i>native declaration : include\curses.h:1092</i>
	 */
	public static int winchstr(Pointer<WINDOW > WINDOWPtr1, Pointer<org.bridj.CLong > chtypePtr1) {
		return winchstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(chtypePtr1));
	}
	protected native static int winchstr(@Ptr long WINDOWPtr1, @Ptr long chtypePtr1);
	/**
	 * Original signature : <code>chtype winch(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1093</i>
	 */
	@org.bridj.ann.CLong 
	public static long winch(Pointer<WINDOW > WINDOWPtr1) {
		return winch(Pointer.getPeer(WINDOWPtr1));
	}
	@org.bridj.ann.CLong 
	protected native static long winch(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int winnstr(WINDOW*, char*, int)</code><br>
	 * <i>native declaration : include\curses.h:1094</i>
	 */
	public static int winnstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1, int int1) {
		return winnstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1), int1);
	}
	protected native static int winnstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int winsch(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1095</i>
	 */
	public static int winsch(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return winsch(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int winsch(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int winsdelln(WINDOW*, int)</code><br>
	 * <i>native declaration : include\curses.h:1096</i>
	 */
	public static int winsdelln(Pointer<WINDOW > WINDOWPtr1, int int1) {
		return winsdelln(Pointer.getPeer(WINDOWPtr1), int1);
	}
	protected native static int winsdelln(@Ptr long WINDOWPtr1, int int1);
	/**
	 * Original signature : <code>int winsertln(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1097</i>
	 */
	public static int winsertln(Pointer<WINDOW > WINDOWPtr1) {
		return winsertln(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int winsertln(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int winsnstr(WINDOW*, const char*, int)</code><br>
	 * <i>native declaration : include\curses.h:1098</i>
	 */
	public static int winsnstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1, int int1) {
		return winsnstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1), int1);
	}
	protected native static int winsnstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1, int int1);
	/**
	 * Original signature : <code>int winsstr(WINDOW*, const char*)</code><br>
	 * <i>native declaration : include\curses.h:1099</i>
	 */
	public static int winsstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return winsstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int winsstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int winstr(WINDOW*, char*)</code><br>
	 * <i>native declaration : include\curses.h:1100</i>
	 */
	public static int winstr(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1) {
		return winstr(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int winstr(@Ptr long WINDOWPtr1, @Ptr long charPtr1);
	/**
	 * Original signature : <code>int wmove(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1101</i>
	 */
	public static int wmove(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return wmove(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int wmove(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int wnoutrefresh(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1102</i>
	 */
	public static int wnoutrefresh(Pointer<WINDOW > WINDOWPtr1) {
		return wnoutrefresh(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wnoutrefresh(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wprintw(WINDOW*, const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:1103</i>
	 */
	public static int wprintw(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1, Object... varargs) {
		return wprintw(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int wprintw(@Ptr long WINDOWPtr1, @Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int wredrawln(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1104</i>
	 */
	public static int wredrawln(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return wredrawln(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int wredrawln(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int wrefresh(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1105</i>
	 */
	public static int wrefresh(Pointer<WINDOW > WINDOWPtr1) {
		return wrefresh(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wrefresh(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wscanw(WINDOW*, const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:1106</i>
	 */
	public static int wscanw(Pointer<WINDOW > WINDOWPtr1, Pointer<Byte > charPtr1, Object... varargs) {
		return wscanw(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(charPtr1));
	}
	protected native static int wscanw(@Ptr long WINDOWPtr1, @Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>int wscrl(WINDOW*, int)</code><br>
	 * <i>native declaration : include\curses.h:1107</i>
	 */
	public static int wscrl(Pointer<WINDOW > WINDOWPtr1, int int1) {
		return wscrl(Pointer.getPeer(WINDOWPtr1), int1);
	}
	protected native static int wscrl(@Ptr long WINDOWPtr1, int int1);
	/**
	 * Original signature : <code>int wsetscrreg(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1108</i>
	 */
	public static int wsetscrreg(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return wsetscrreg(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int wsetscrreg(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int wstandend(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1109</i>
	 */
	public static int wstandend(Pointer<WINDOW > WINDOWPtr1) {
		return wstandend(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wstandend(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wstandout(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1110</i>
	 */
	public static int wstandout(Pointer<WINDOW > WINDOWPtr1) {
		return wstandout(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wstandout(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>void wsyncdown(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1111</i>
	 */
	public static void wsyncdown(Pointer<WINDOW > WINDOWPtr1) {
		wsyncdown(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static void wsyncdown(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>void wsyncup(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1112</i>
	 */
	public static void wsyncup(Pointer<WINDOW > WINDOWPtr1) {
		wsyncup(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static void wsyncup(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>void wtimeout(WINDOW*, int)</code><br>
	 * <i>native declaration : include\curses.h:1113</i>
	 */
	public static void wtimeout(Pointer<WINDOW > WINDOWPtr1, int int1) {
		wtimeout(Pointer.getPeer(WINDOWPtr1), int1);
	}
	protected native static void wtimeout(@Ptr long WINDOWPtr1, int int1);
	/**
	 * Original signature : <code>int wtouchln(WINDOW*, int, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1114</i>
	 */
	public static int wtouchln(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, int int3) {
		return wtouchln(Pointer.getPeer(WINDOWPtr1), int1, int2, int3);
	}
	protected native static int wtouchln(@Ptr long WINDOWPtr1, int int1, int int2, int int3);
	/**
	 * Original signature : <code>int wvline(WINDOW*, chtype, int)</code><br>
	 * <i>native declaration : include\curses.h:1115</i>
	 */
	public static int wvline(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1, int int1) {
		return wvline(Pointer.getPeer(WINDOWPtr1), chtype1, int1);
	}
	protected native static int wvline(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1, int int1);
	/**
	 * Original signature : <code>chtype getattrs(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1221</i>
	 */
	@org.bridj.ann.CLong 
	public static long getattrs(Pointer<WINDOW > WINDOWPtr1) {
		return getattrs(Pointer.getPeer(WINDOWPtr1));
	}
	@org.bridj.ann.CLong 
	protected native static long getattrs(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getbegx(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1222</i>
	 */
	public static int getbegx(Pointer<WINDOW > WINDOWPtr1) {
		return getbegx(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getbegx(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getbegy(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1223</i>
	 */
	public static int getbegy(Pointer<WINDOW > WINDOWPtr1) {
		return getbegy(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getbegy(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getmaxx(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1224</i>
	 */
	public static int getmaxx(Pointer<WINDOW > WINDOWPtr1) {
		return getmaxx(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getmaxx(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getmaxy(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1225</i>
	 */
	public static int getmaxy(Pointer<WINDOW > WINDOWPtr1) {
		return getmaxy(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getmaxy(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getparx(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1226</i>
	 */
	public static int getparx(Pointer<WINDOW > WINDOWPtr1) {
		return getparx(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getparx(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getpary(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1227</i>
	 */
	public static int getpary(Pointer<WINDOW > WINDOWPtr1) {
		return getpary(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getpary(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getcurx(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1228</i>
	 */
	public static int getcurx(Pointer<WINDOW > WINDOWPtr1) {
		return getcurx(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getcurx(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int getcury(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1229</i>
	 */
	public static int getcury(Pointer<WINDOW > WINDOWPtr1) {
		return getcury(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int getcury(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>void traceoff()</code><br>
	 * <i>native declaration : include\curses.h:1230</i>
	 */
	native public static void traceoff();
	/**
	 * Original signature : <code>void traceon()</code><br>
	 * <i>native declaration : include\curses.h:1231</i>
	 */
	native public static void traceon();
	/**
	 * Original signature : <code>char* unctrl(chtype)</code><br>
	 * <i>native declaration : include\curses.h:1232</i>
	 */
	public static Pointer<Byte > unctrl(@org.bridj.ann.CLong long chtype1) {
		return Pointer.pointerToAddress(unctrl$2(chtype1), Byte.class);
	}
	@Ptr 
	@Name("unctrl") 
	protected native static long unctrl$2(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int crmode()</code><br>
	 * <i>native declaration : include\curses.h:1234</i>
	 */
	native public static int crmode();
	/**
	 * Original signature : <code>int nocrmode()</code><br>
	 * <i>native declaration : include\curses.h:1235</i>
	 */
	native public static int nocrmode();
	/**
	 * Original signature : <code>int draino(int)</code><br>
	 * <i>native declaration : include\curses.h:1236</i>
	 */
	native public static int draino(int int1);
	/**
	 * Original signature : <code>int resetterm()</code><br>
	 * <i>native declaration : include\curses.h:1237</i>
	 */
	native public static int resetterm();
	/**
	 * Original signature : <code>int fixterm()</code><br>
	 * <i>native declaration : include\curses.h:1238</i>
	 */
	native public static int fixterm();
	/**
	 * Original signature : <code>int saveterm()</code><br>
	 * <i>native declaration : include\curses.h:1239</i>
	 */
	native public static int saveterm();
	/**
	 * Original signature : <code>void setsyx(int, int)</code><br>
	 * <i>native declaration : include\curses.h:1240</i>
	 */
	native public static void setsyx(int int1, int int2);
	/**
	 * Original signature : <code>int mouse_set(mmask_t)</code><br>
	 * <i>native declaration : include\curses.h:1242</i>
	 */
	native public static int mouse_set(@org.bridj.ann.CLong long mmask_t1);
	/**
	 * Original signature : <code>int mouse_on(mmask_t)</code><br>
	 * <i>native declaration : include\curses.h:1243</i>
	 */
	native public static int mouse_on(@org.bridj.ann.CLong long mmask_t1);
	/**
	 * Original signature : <code>int mouse_off(mmask_t)</code><br>
	 * <i>native declaration : include\curses.h:1244</i>
	 */
	native public static int mouse_off(@org.bridj.ann.CLong long mmask_t1);
	/**
	 * Original signature : <code>int request_mouse_pos()</code><br>
	 * <i>native declaration : include\curses.h:1245</i>
	 */
	native public static int request_mouse_pos();
	/**
	 * Original signature : <code>void wmouse_position(WINDOW*, int*, int*)</code><br>
	 * <i>native declaration : include\curses.h:1246</i>
	 */
	public static void wmouse_position(Pointer<WINDOW > WINDOWPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2) {
		wmouse_position(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(intPtr1), Pointer.getPeer(intPtr2));
	}
	protected native static void wmouse_position(@Ptr long WINDOWPtr1, @Ptr long intPtr1, @Ptr long intPtr2);
	/**
	 * Original signature : <code>mmask_t getmouse()</code><br>
	 * <i>native declaration : include\curses.h:1247</i>
	 */
	@org.bridj.ann.CLong 
	native public static long getmouse();
	/**
	 * Original signature : <code>int assume_default_colors(int, int)</code><br>
	 * <i>native declaration : include\curses.h:1251</i>
	 */
	native public static int assume_default_colors(int int1, int int2);
	/**
	 * Original signature : <code>char* curses_version()</code><br>
	 * <i>native declaration : include\curses.h:1252</i>
	 */
	public static Pointer<Byte > curses_version() {
		return Pointer.pointerToAddress(curses_version$2(), Byte.class);
	}
	@Ptr 
	@Name("curses_version") 
	protected native static long curses_version$2();
	/**
	 * Original signature : <code>_bool has_key(int)</code><br>
	 * <i>native declaration : include\curses.h:1253</i>
	 */
	native public static byte has_key(int int1);
	/**
	 * Original signature : <code>_bool is_keypad(const WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1254</i>
	 */
	public static byte is_keypad(Pointer<WINDOW > WINDOWPtr1) {
		return is_keypad(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static byte is_keypad(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>_bool is_leaveok(const WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1255</i>
	 */
	public static byte is_leaveok(Pointer<WINDOW > WINDOWPtr1) {
		return is_leaveok(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static byte is_leaveok(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>_bool is_pad(const WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1256</i>
	 */
	public static byte is_pad(Pointer<WINDOW > WINDOWPtr1) {
		return is_pad(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static byte is_pad(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int set_tabsize(int)</code><br>
	 * <i>native declaration : include\curses.h:1257</i>
	 */
	native public static int set_tabsize(int int1);
	/**
	 * Original signature : <code>int use_default_colors()</code><br>
	 * <i>native declaration : include\curses.h:1258</i>
	 */
	native public static int use_default_colors();
	/**
	 * Original signature : <code>int wresize(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1259</i>
	 */
	public static int wresize(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return wresize(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int wresize(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>_bool has_mouse()</code><br>
	 * <i>native declaration : include\curses.h:1261</i>
	 */
	native public static byte has_mouse();
	/**
	 * Original signature : <code>int mouseinterval(int)</code><br>
	 * <i>native declaration : include\curses.h:1262</i>
	 */
	native public static int mouseinterval(int int1);
	/**
	 * Original signature : <code>mmask_t mousemask(mmask_t, mmask_t*)</code><br>
	 * <i>native declaration : include\curses.h:1263</i>
	 */
	@org.bridj.ann.CLong 
	public static long mousemask(@org.bridj.ann.CLong long mmask_t1, Pointer<org.bridj.CLong > mmask_tPtr1) {
		return mousemask(mmask_t1, Pointer.getPeer(mmask_tPtr1));
	}
	@org.bridj.ann.CLong 
	protected native static long mousemask(@org.bridj.ann.CLong long mmask_t1, @Ptr long mmask_tPtr1);
	/**
	 * Original signature : <code>_bool mouse_trafo(int*, int*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:1264</i>
	 */
	public static byte mouse_trafo(Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, byte _bool1) {
		return mouse_trafo(Pointer.getPeer(intPtr1), Pointer.getPeer(intPtr2), _bool1);
	}
	protected native static byte mouse_trafo(@Ptr long intPtr1, @Ptr long intPtr2, byte _bool1);
	/**
	 * Original signature : <code>int nc_getmouse(MEVENT*)</code><br>
	 * <i>native declaration : include\curses.h:1265</i>
	 */
	public static int nc_getmouse(Pointer<MEVENT > MEVENTPtr1) {
		return nc_getmouse(Pointer.getPeer(MEVENTPtr1));
	}
	protected native static int nc_getmouse(@Ptr long MEVENTPtr1);
	/**
	 * Original signature : <code>int ungetmouse(MEVENT*)</code><br>
	 * <i>native declaration : include\curses.h:1266</i>
	 */
	public static int ungetmouse(Pointer<MEVENT > MEVENTPtr1) {
		return ungetmouse(Pointer.getPeer(MEVENTPtr1));
	}
	protected native static int ungetmouse(@Ptr long MEVENTPtr1);
	/**
	 * Original signature : <code>_bool wenclose(const WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1267</i>
	 */
	public static byte wenclose(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return wenclose(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static byte wenclose(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>_bool wmouse_trafo(const WINDOW*, int*, int*, _bool)</code><br>
	 * <i>native declaration : include\curses.h:1268</i>
	 */
	public static byte wmouse_trafo(Pointer<WINDOW > WINDOWPtr1, Pointer<Integer > intPtr1, Pointer<Integer > intPtr2, byte _bool1) {
		return wmouse_trafo(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(intPtr1), Pointer.getPeer(intPtr2), _bool1);
	}
	protected native static byte wmouse_trafo(@Ptr long WINDOWPtr1, @Ptr long intPtr1, @Ptr long intPtr2, byte _bool1);
	/**
	 * Original signature : <code>int addrawch(chtype)</code><br>
	 * <i>native declaration : include\curses.h:1272</i>
	 */
	native public static int addrawch(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int insrawch(chtype)</code><br>
	 * <i>native declaration : include\curses.h:1273</i>
	 */
	native public static int insrawch(@org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>_bool is_termresized()</code><br>
	 * <i>native declaration : include\curses.h:1274</i>
	 */
	native public static byte is_termresized();
	/**
	 * Original signature : <code>int mvaddrawch(int, int, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1275</i>
	 */
	native public static int mvaddrawch(int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int mvdeleteln(int, int)</code><br>
	 * <i>native declaration : include\curses.h:1276</i>
	 */
	native public static int mvdeleteln(int int1, int int2);
	/**
	 * Original signature : <code>int mvinsertln(int, int)</code><br>
	 * <i>native declaration : include\curses.h:1277</i>
	 */
	native public static int mvinsertln(int int1, int int2);
	/**
	 * Original signature : <code>int mvinsrawch(int, int, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1278</i>
	 */
	native public static int mvinsrawch(int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int mvwaddrawch(WINDOW*, int, int, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1279</i>
	 */
	public static int mvwaddrawch(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1) {
		return mvwaddrawch(Pointer.getPeer(WINDOWPtr1), int1, int2, chtype1);
	}
	protected native static int mvwaddrawch(@Ptr long WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int mvwdeleteln(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1280</i>
	 */
	public static int mvwdeleteln(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return mvwdeleteln(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int mvwdeleteln(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int mvwinsertln(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1281</i>
	 */
	public static int mvwinsertln(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return mvwinsertln(Pointer.getPeer(WINDOWPtr1), int1, int2);
	}
	protected native static int mvwinsertln(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int mvwinsrawch(WINDOW*, int, int, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1282</i>
	 */
	public static int mvwinsrawch(Pointer<WINDOW > WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1) {
		return mvwinsrawch(Pointer.getPeer(WINDOWPtr1), int1, int2, chtype1);
	}
	protected native static int mvwinsrawch(@Ptr long WINDOWPtr1, int int1, int int2, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int raw_output(_bool)</code><br>
	 * <i>native declaration : include\curses.h:1283</i>
	 */
	native public static int raw_output(byte _bool1);
	/**
	 * Original signature : <code>int resize_term(int, int)</code><br>
	 * <i>native declaration : include\curses.h:1284</i>
	 */
	native public static int resize_term(int int1, int int2);
	/**
	 * Original signature : <code>WINDOW* resize_window(WINDOW*, int, int)</code><br>
	 * <i>native declaration : include\curses.h:1285</i>
	 */
	public static Pointer<WINDOW > resize_window(Pointer<WINDOW > WINDOWPtr1, int int1, int int2) {
		return Pointer.pointerToAddress(resize_window(Pointer.getPeer(WINDOWPtr1), int1, int2), WINDOW.class);
	}
	@Ptr 
	protected native static long resize_window(@Ptr long WINDOWPtr1, int int1, int int2);
	/**
	 * Original signature : <code>int waddrawch(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1286</i>
	 */
	public static int waddrawch(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return waddrawch(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int waddrawch(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>int winsrawch(WINDOW*, chtype)</code><br>
	 * <i>native declaration : include\curses.h:1287</i>
	 */
	public static int winsrawch(Pointer<WINDOW > WINDOWPtr1, @org.bridj.ann.CLong long chtype1) {
		return winsrawch(Pointer.getPeer(WINDOWPtr1), chtype1);
	}
	protected native static int winsrawch(@Ptr long WINDOWPtr1, @org.bridj.ann.CLong long chtype1);
	/**
	 * Original signature : <code>char wordchar()</code><br>
	 * <i>native declaration : include\curses.h:1288</i>
	 */
	native public static byte wordchar();
	/**
	 * Original signature : <code>void PDC_debug(const char*, null)</code><br>
	 * <i>native declaration : include\curses.h:1294</i>
	 */
	public static void PDC_debug(Pointer<Byte > charPtr1, Object... varargs) {
		PDC_debug(Pointer.getPeer(charPtr1));
	}
	protected native static void PDC_debug(@Ptr long charPtr1, Object... varargs);
	/**
	 * Original signature : <code>void PDC_get_version(PDC_VERSION*)</code><br>
	 * <i>native declaration : include\curses.h:1295</i>
	 */
	public static void PDC_get_version(Pointer<PDC_VERSION > PDC_VERSIONPtr1) {
		PDC_get_version(Pointer.getPeer(PDC_VERSIONPtr1));
	}
	protected native static void PDC_get_version(@Ptr long PDC_VERSIONPtr1);
	/**
	 * Original signature : <code>int PDC_ungetch(int)</code><br>
	 * <i>native declaration : include\curses.h:1296</i>
	 */
	native public static int PDC_ungetch(int int1);
	/**
	 * Original signature : <code>int PDC_set_blink(_bool)</code><br>
	 * <i>native declaration : include\curses.h:1297</i>
	 */
	native public static int PDC_set_blink(byte _bool1);
	/**
	 * Original signature : <code>int PDC_set_bold(_bool)</code><br>
	 * <i>native declaration : include\curses.h:1298</i>
	 */
	native public static int PDC_set_bold(byte _bool1);
	/**
	 * Original signature : <code>int PDC_set_line_color(short)</code><br>
	 * <i>native declaration : include\curses.h:1299</i>
	 */
	native public static int PDC_set_line_color(short s1);
	/**
	 * Original signature : <code>void PDC_set_title(const char*)</code><br>
	 * <i>native declaration : include\curses.h:1300</i>
	 */
	public static void PDC_set_title(Pointer<Byte > charPtr1) {
		PDC_set_title(Pointer.getPeer(charPtr1));
	}
	protected native static void PDC_set_title(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int PDC_clearclipboard()</code><br>
	 * <i>native declaration : include\curses.h:1302</i>
	 */
	native public static int PDC_clearclipboard();
	/**
	 * Original signature : <code>int PDC_freeclipboard(char*)</code><br>
	 * <i>native declaration : include\curses.h:1303</i>
	 */
	public static int PDC_freeclipboard(Pointer<Byte > charPtr1) {
		return PDC_freeclipboard(Pointer.getPeer(charPtr1));
	}
	protected native static int PDC_freeclipboard(@Ptr long charPtr1);
	/**
	 * Original signature : <code>int PDC_getclipboard(char**, long*)</code><br>
	 * <i>native declaration : include\curses.h:1304</i>
	 */
	public static int PDC_getclipboard(Pointer<Pointer<Byte > > charPtrPtr1, Pointer<org.bridj.CLong > lPtr1) {
		return PDC_getclipboard(Pointer.getPeer(charPtrPtr1), Pointer.getPeer(lPtr1));
	}
	protected native static int PDC_getclipboard(@Ptr long charPtrPtr1, @Ptr long lPtr1);
	/**
	 * Original signature : <code>int PDC_setclipboard(const char*, long)</code><br>
	 * <i>native declaration : include\curses.h:1305</i>
	 */
	public static int PDC_setclipboard(Pointer<Byte > charPtr1, @org.bridj.ann.CLong long l1) {
		return PDC_setclipboard(Pointer.getPeer(charPtr1), l1);
	}
	protected native static int PDC_setclipboard(@Ptr long charPtr1, @org.bridj.ann.CLong long l1);
	/**
	 * Original signature : <code>long PDC_get_input_fd()</code><br>
	 * <i>native declaration : include\curses.h:1307</i>
	 */
	@org.bridj.ann.CLong 
	native public static long PDC_get_input_fd();
	/**
	 * Original signature : <code>long PDC_get_key_modifiers()</code><br>
	 * <i>native declaration : include\curses.h:1308</i>
	 */
	@org.bridj.ann.CLong 
	native public static long PDC_get_key_modifiers();
	/**
	 * Original signature : <code>int PDC_return_key_modifiers(_bool)</code><br>
	 * <i>native declaration : include\curses.h:1309</i>
	 */
	native public static int PDC_return_key_modifiers(byte _bool1);
	/**
	 * Original signature : <code>int touchoverlap(const WINDOW*, WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1324</i>
	 */
	public static int touchoverlap(Pointer<WINDOW > WINDOWPtr1, Pointer<WINDOW > WINDOWPtr2) {
		return touchoverlap(Pointer.getPeer(WINDOWPtr1), Pointer.getPeer(WINDOWPtr2));
	}
	protected native static int touchoverlap(@Ptr long WINDOWPtr1, @Ptr long WINDOWPtr2);
	/**
	 * Original signature : <code>int underend()</code><br>
	 * <i>native declaration : include\curses.h:1325</i>
	 */
	native public static int underend();
	/**
	 * Original signature : <code>int underscore()</code><br>
	 * <i>native declaration : include\curses.h:1326</i>
	 */
	native public static int underscore();
	/**
	 * Original signature : <code>int wunderend(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1327</i>
	 */
	public static int wunderend(Pointer<WINDOW > WINDOWPtr1) {
		return wunderend(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wunderend(@Ptr long WINDOWPtr1);
	/**
	 * Original signature : <code>int wunderscore(WINDOW*)</code><br>
	 * <i>native declaration : include\curses.h:1328</i>
	 */
	public static int wunderscore(Pointer<WINDOW > WINDOWPtr1) {
		return wunderscore(Pointer.getPeer(WINDOWPtr1));
	}
	protected native static int wunderscore(@Ptr long WINDOWPtr1);
	/// terminal height
	public int LINES() {
		try {
			return (int)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("LINES").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// terminal height
	public PdcursesLibrary LINES(int LINES) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("LINES").as(int.class).set(LINES);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// terminal width
	public int COLS() {
		try {
			return (int)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("COLS").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// terminal width
	public PdcursesLibrary COLS(int COLS) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("COLS").as(int.class).set(COLS);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * the default screen window<br>
	 * C type : extern WINDOW*
	 */
	public Pointer<WINDOW > stdscr() {
		try {
			return (Pointer<WINDOW >)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("stdscr").as(DefaultParameterizedType.paramType(Pointer.class, WINDOW.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * the default screen window<br>
	 * C type : extern WINDOW*
	 */
	public PdcursesLibrary stdscr(Pointer<WINDOW > stdscr) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("stdscr").as(DefaultParameterizedType.paramType(Pointer.class, WINDOW.class)).set(stdscr);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * the current screen image<br>
	 * C type : extern WINDOW*
	 */
	public Pointer<WINDOW > curscr() {
		try {
			return (Pointer<WINDOW >)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("curscr").as(DefaultParameterizedType.paramType(Pointer.class, WINDOW.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * the current screen image<br>
	 * C type : extern WINDOW*
	 */
	public PdcursesLibrary curscr(Pointer<WINDOW > curscr) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("curscr").as(DefaultParameterizedType.paramType(Pointer.class, WINDOW.class)).set(curscr);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * curses variables<br>
	 * C type : extern SCREEN*
	 */
	public Pointer<SCREEN > SP() {
		try {
			return (Pointer<SCREEN >)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("SP").as(DefaultParameterizedType.paramType(Pointer.class, SCREEN.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * curses variables<br>
	 * C type : extern SCREEN*
	 */
	public PdcursesLibrary SP(Pointer<SCREEN > SP) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("SP").as(DefaultParameterizedType.paramType(Pointer.class, SCREEN.class)).set(SP);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern MOUSE_STATUS
	public MOUSE_STATUS Mouse_status() {
		try {
			return (MOUSE_STATUS)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("Mouse_status").as(MOUSE_STATUS.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// C type : extern MOUSE_STATUS
	public PdcursesLibrary Mouse_status(MOUSE_STATUS Mouse_status) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("Mouse_status").as(MOUSE_STATUS.class).set(Mouse_status);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int COLORS() {
		try {
			return (int)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("COLORS").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public PdcursesLibrary COLORS(int COLORS) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("COLORS").as(int.class).set(COLORS);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int COLOR_PAIRS() {
		try {
			return (int)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("COLOR_PAIRS").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public PdcursesLibrary COLOR_PAIRS(int COLOR_PAIRS) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("COLOR_PAIRS").as(int.class).set(COLOR_PAIRS);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public int TABSIZE() {
		try {
			return (int)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("TABSIZE").as(int.class).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	public PdcursesLibrary TABSIZE(int TABSIZE) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("TABSIZE").as(int.class).set(TABSIZE);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * alternate character set map<br>
	 * C type : extern chtype[]
	 */
	public Pointer<org.bridj.CLong > acs_map() {
		try {
			return (Pointer<org.bridj.CLong >)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("acs_map").as(DefaultParameterizedType.paramType(Pointer.class, org.bridj.CLong.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * alternate character set map<br>
	 * C type : extern chtype[]
	 */
	public PdcursesLibrary acs_map(Pointer<org.bridj.CLong > acs_map) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("acs_map").as(DefaultParameterizedType.paramType(Pointer.class, org.bridj.CLong.class)).set(acs_map);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * terminal name/description<br>
	 * C type : extern char[]
	 */
	public Pointer<Byte > ttytype() {
		try {
			return (Pointer<Byte >)BridJ.getNativeLibrary("pdcurses").getSymbolPointer("ttytype").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).get();
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/**
	 * terminal name/description<br>
	 * C type : extern char[]
	 */
	public PdcursesLibrary ttytype(Pointer<Byte > ttytype) {
		try {
			{
				BridJ.getNativeLibrary("pdcurses").getSymbolPointer("ttytype").as(DefaultParameterizedType.paramType(Pointer.class, Byte.class)).set(ttytype);
				return this;
			}
		}catch (Throwable $ex$) {
			throw new RuntimeException($ex$);
		}
	}
	/// Undefined type
	/// Undefined type
	public static interface FILE {
		
	};
}
